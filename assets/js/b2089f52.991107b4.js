"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1986],{84907:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(39953);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},10342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(1943),a=(n(39953),n(84907));const o={},i="DataSources",s={unversionedId:"docs/how-it-works/datasources/readme",id:"docs/how-it-works/datasources/readme",title:"DataSources",description:"DataSources are the glue that connect your Feature Definitions to the production data sources (such as streaming,",source:"@site/docs/docs/how-it-works/datasources/readme.md",sourceDirName:"docs/how-it-works/datasources",slug:"/docs/how-it-works/datasources/",permalink:"/docs/how-it-works/datasources/",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/how-it-works/datasources/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"How does Raptor work?",permalink:"/docs/how-it-works/"},next:{title:"Rest",permalink:"/docs/how-it-works/datasources/rest"}},c={},u=[{value:"DataSource definition",id:"datasource-definition",level:2},{value:"DataSource usage",id:"datasource-usage",level:2}],l={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"datasources"},"DataSources"),(0,a.kt)("p",null,"DataSources are the glue that connect your Feature Definitions to the production data sources (such as streaming,\ndatabases, CRM systems, etc.)."),(0,a.kt)("p",null,"The DataSources takes care of the production concerns of handling high-volume data. And responsible for many related\ntasks, such as: Authentication, Rate-limiting, Schema Normalization, Retry, etc."),(0,a.kt)("h2",{id:"datasource-definition"},"DataSource definition"),(0,a.kt)("p",null,"DataSources are usually configured by DevOps and are defined as a Kubernetes resource:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: k8s.raptor.ml/v1alpha1\nkind: DataSource\nmetadata:\n  name: clicks\nspec:\n  kind: streaming\n  config:\n    - name: kind\n      value: kafka\n    - name: brokers\n      value: :9093\n    - name: topics\n      value: clickstream\n    - name: consumer_group\n      value: clicks-consumer-group\n    - name: tls_disable\n      value: "true"\n  keyFields:\n    - client_id\n  timestampField: timestamp\n  schema: https://raw.githubusercontent.com/raptor-ml/massivedynamic-protos/master/click.proto#Click\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DataSource")," definition is composed by the metadata(which defines its name), the ",(0,a.kt)("inlineCode",{parentName:"p"},"kind")," of this connector, and\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"config")," of this particular kind."),(0,a.kt)("p",null,"For more information, see the relevant DataConnector documentation."),(0,a.kt)("h2",{id:"datasource-usage"},"DataSource usage"),(0,a.kt)("p",null,"They are then referenced in your Feature Definitions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: k8s.raptor.ml/v1alpha1\nkind: Feature\nmetadata:\n  name: clicks\n  namespace: default #production\n  annotations:\n    a8r.io/owner: "@AlmogBaku"\n    a8r.io/description: "Demonstration of a simple aggr function"\nspec:\n  primitive: int\n  freshness: 10s\n  staleness: 1m\n  dataSource:\n    name: clicks\n  keys:\n    - client_id\n  builder:\n    aggr:\n      - sum\n      - count\n    code: |\n      def handler(data, ctx) -> int:\n        return 1, ctx.timestamp, ctx.keys["client_id"].split(":")[1]\n\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you are not defining the ",(0,a.kt)("inlineCode",{parentName:"p"},"namespace"),", the Feature's namespace will be used.")))}d.isMDXComponent=!0}}]);