"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6832],{4907:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(9953);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),f=i,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||a;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=f;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5246:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=n(1943),i=(n(9953),n(4907));const a={description:'Although PyExp is pretty similar to "regular" python, it\'s actually has a few differences which allow us to run it in a deterministic way that is production-proof.'},l="Differences with Python",o={unversionedId:"reference/pyexp/differences-with-python",id:"reference/pyexp/differences-with-python",title:"Differences with Python",description:'Although PyExp is pretty similar to "regular" python, it\'s actually has a few differences which allow us to run it in a deterministic way that is production-proof.',source:"@site/docs/reference/pyexp/differences-with-python.md",sourceDirName:"reference/pyexp",slug:"/reference/pyexp/differences-with-python",permalink:"/docs/reference/pyexp/differences-with-python",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/pyexp/differences-with-python.md",tags:[],version:"current",frontMatter:{description:'Although PyExp is pretty similar to "regular" python, it\'s actually has a few differences which allow us to run it in a deterministic way that is production-proof.'},sidebar:"reference",previous:{title:"Python Expression Language (PyExp)",permalink:"/docs/reference/pyexp/"},next:{title:"Handler function",permalink:"/docs/reference/pyexp/handler-function"}},p={},s=[],c={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"differences-with-python"},"Differences with Python"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Global variables are immutable."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"for")," statements are not allowed at the top-level. Use them within functions instead. In ",(0,i.kt)("inlineCode",{parentName:"li"},"BUILD")," files, you may use list comprehensions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"if")," statements are not allowed at the top-level. However, ",(0,i.kt)("inlineCode",{parentName:"li"},"if")," expressions can be used: ",(0,i.kt)("inlineCode",{parentName:"li"},"first = data[0] if len(data) > 0 else None"),"."),(0,i.kt)("li",{parentName:"ul"},"Deterministic order for iterating through Dictionaries."),(0,i.kt)("li",{parentName:"ul"},"Recursion is not allowed."),(0,i.kt)("li",{parentName:"ul"},"Int type is limited to 32-bit signed integers. Overflows will throw an error."),(0,i.kt)("li",{parentName:"ul"},"Modifying a collection during iteration is an error."),(0,i.kt)("li",{parentName:"ul"},"Except for equality tests, comparison operators ",(0,i.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"<="),", ",(0,i.kt)("inlineCode",{parentName:"li"},">="),", ",(0,i.kt)("inlineCode",{parentName:"li"},">"),", etc. are not defined across value types. In short: ",(0,i.kt)("inlineCode",{parentName:"li"},"5 < 'foo'")," will throw an error and ",(0,i.kt)("inlineCode",{parentName:"li"},'5 == "5"')," will return false."),(0,i.kt)("li",{parentName:"ul"},"In tuples, a trailing comma is valid only when the tuple is between parentheses, e.g. write ",(0,i.kt)("inlineCode",{parentName:"li"},"(1,)")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"1,"),"."),(0,i.kt)("li",{parentName:"ul"},"Dictionary literals cannot have duplicated keys. For example, this is an error: ",(0,i.kt)("inlineCode",{parentName:"li"},'{"a": 4, "b": 7, "a": 1}'),"."),(0,i.kt)("li",{parentName:"ul"},"Strings are represented with double-quotes (e.g. when you call ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/built-in-constants-and-functions#repr"},"repr"),")."),(0,i.kt)("li",{parentName:"ul"},"Strings aren\u2019t iterable.")),(0,i.kt)("p",null,"The following Python features are not supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"implicit string concatenation (use explicit ",(0,i.kt)("inlineCode",{parentName:"li"},"+")," operator)."),(0,i.kt)("li",{parentName:"ul"},"Chained comparisons (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"1 < x < 5"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"class")," (see struct function)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"import")," (see ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/statements#load-statements"},(0,i.kt)("inlineCode",{parentName:"a"},"load"))," statement)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"while"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"yield"),"."),(0,i.kt)("li",{parentName:"ul"},"float and set types."),(0,i.kt)("li",{parentName:"ul"},"generators and generator expressions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lambda")," and nested functions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is")," (use ",(0,i.kt)("inlineCode",{parentName:"li"},"==")," instead)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"try"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"raise"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"except"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"finally")," (see ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/built-in-constants-and-functions#fail"},(0,i.kt)("inlineCode",{parentName:"a"},"fail"))," for fatal errors)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"global"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"nonlocal"),"."),(0,i.kt)("li",{parentName:"ul"},"most built-in functions, most methods.")))}u.isMDXComponent=!0}}]);