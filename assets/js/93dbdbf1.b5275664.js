"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6113],{4907:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var r=a(9953);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function u(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),s=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):u(u({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=s(a),m=n,c=f["".concat(i,".").concat(m)]||f[m]||d[m]||l;return a?r.createElement(c,u(u({ref:t},p),{},{components:a})):r.createElement(c,u({ref:t},p))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,u=new Array(l);u[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[f]="string"==typeof e?e:n,u[1]=o;for(var s=2;s<l;s++)u[s]=a[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9463:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>f,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=a(1943),n=(a(9953),a(4907));const l={title:"Feature Set"},u=void 0,o={unversionedId:"guides/labsdk/featureset",id:"guides/labsdk/featureset",title:"Feature Set",description:"Feature Sets are a way to group features together as a ready-to-use dataset for your model:",source:"@site/docs/guides/labsdk/6-featureset.md",sourceDirName:"guides/labsdk",slug:"/guides/labsdk/featureset",permalink:"/docs/guides/labsdk/featureset",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/guides/labsdk/6-featureset.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Feature Set"},sidebar:"guides",previous:{title:"Derived feature (or How to do Joins?)",permalink:"/docs/guides/labsdk/derived"},next:{title:"Installing Raptor on your Kubernetes cluster",permalink:"/docs/guides/install"}},i={},s=[{value:"Key Feature",id:"key-feature",level:2},{value:"Setting the key feature",id:"setting-the-key-feature",level:3}],p={toc:s};function f(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Feature Sets are a way to group features together as a ready-to-use dataset for your model:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"When in production"),' - the feature set is a "row" composed of the most recent feature values(considering the SLA)\nready\nfor inference.'),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"When in training"),' - the feature set is a complete "dataframe" composed of all the features as columns, and all the\nfeature values at the same time as rows.')),(0,n.kt)("p",null,"When using the LabSDK, you can create a feature set by using\nthe ",(0,n.kt)("a",{parentName:"p",href:"/docs/reference/labsdk/featureset"},(0,n.kt)("inlineCode",{parentName:"a"},"feature_set()"))," decorator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'@raptor.feature_set()\ndef my_feature_set():\n    """this is a my feature set"""\n    return hello_world, "feature_with_aggr.default[sum]"\n')),(0,n.kt)("p",null,"When defining a feature set, we simply create a function that return a tuple.\nEach element of the tuple is either a feature function, or an ",(0,n.kt)("a",{parentName:"p",href:"/docs/reference/how-does-raptor-work/fqn"},"FQN")," of a\nfeature function."),(0,n.kt)("admonition",{title:"When should we use FQNs?",type:"note"},(0,n.kt)("p",{parentName:"admonition"},"The Fully Qualified Name (FQN) is a way to reference a feature function by its name.\nIt's composed by the feature's name, and it's namespace: ",(0,n.kt)("inlineCode",{parentName:"p"},"<name>.<namespace>")," (the default namespace is ",(0,n.kt)("inlineCode",{parentName:"p"},"default"),")."),(0,n.kt)("p",{parentName:"admonition"},"When we want to add a feature that have an aggregation, we must use FQN to reference it: ",(0,n.kt)("inlineCode",{parentName:"p"},"<name>.<namespace>[<aggrFn>]"),".")),(0,n.kt)("h2",{id:"key-feature"},"Key Feature"),(0,n.kt)("p",null,"The key feature is the feature that we used to join the rest of the features with, i.e.:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"timestamp"),(0,n.kt)("th",{parentName:"tr",align:null},"entity_id"),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"th"},"feature_1")),(0,n.kt)("th",{parentName:"tr",align:null},"feature_2"),(0,n.kt)("th",{parentName:"tr",align:null},"feature_3"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"10:00"),(0,n.kt)("td",{parentName:"tr",align:null},"10"),(0,n.kt)("td",{parentName:"tr",align:null},"..."),(0,n.kt)("td",{parentName:"tr",align:null},"..."),(0,n.kt)("td",{parentName:"tr",align:null},"...")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"10:01"),(0,n.kt)("td",{parentName:"tr",align:null},"10"),(0,n.kt)("td",{parentName:"tr",align:null},"..."),(0,n.kt)("td",{parentName:"tr",align:null},"..."),(0,n.kt)("td",{parentName:"tr",align:null},"...")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"10:02"),(0,n.kt)("td",{parentName:"tr",align:null},"10"),(0,n.kt)("td",{parentName:"tr",align:null},"..."),(0,n.kt)("td",{parentName:"tr",align:null},"..."),(0,n.kt)("td",{parentName:"tr",align:null},"...")))),(0,n.kt)("p",null,"As you see in the table below, we are using the key feature (",(0,n.kt)("inlineCode",{parentName:"p"},"feature_1"),") timestamps to join the rest of the features -\nthat means that we are getting the feature value of the rest of the features at the same time as the key feature."),(0,n.kt)("h3",{id:"setting-the-key-feature"},"Setting the key feature"),(0,n.kt)("p",null,"The key feature is defined as the ",(0,n.kt)("strong",{parentName:"p"},"first")," feature in the feature set. Alternatively, you can set the key feature using\nthe options of the decorator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'@raptor.feature_set(options={\'key_feature\': \'feature_1\'})\ndef my_feature_set():\n    """this is a my feature set"""\n    return hello_world, "feature_with_aggr.default[sum]", "feature_1"\n')))}f.isMDXComponent=!0}}]);