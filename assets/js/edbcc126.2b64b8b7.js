"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5596],{4907:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(9953);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,m=p["".concat(s,".").concat(d)]||p[d]||g[d]||o;return r?a.createElement(m,i(i({ref:t},c),{},{components:r})):a.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1135:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=r(1943),n=(r(9953),r(4907));const o={},i="Aggregations",l={unversionedId:"reference/how-does-raptor-work/features/aggregations",id:"reference/how-does-raptor-work/features/aggregations",title:"Aggregations",description:"Aggregations are a way to summarize data over a time window. They are used to calculate the feature value, and are",source:"@site/docs/reference/how-does-raptor-work/features/aggregations.md",sourceDirName:"reference/how-does-raptor-work/features",slug:"/reference/how-does-raptor-work/features/aggregations",permalink:"/docs/reference/how-does-raptor-work/features/aggregations",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/how-does-raptor-work/features/aggregations.md",tags:[],version:"current",frontMatter:{},sidebar:"reference",previous:{title:"Features",permalink:"/docs/reference/how-does-raptor-work/features/"},next:{title:"Context",permalink:"/docs/reference/how-does-raptor-work/features/context"}},s={},u=[{value:"Aggregation Types",id:"aggregation-types",level:2},{value:"How does it work?",id:"how-does-it-work",level:2},{value:"How does it work in production?",id:"how-does-it-work-in-production",level:2}],c={toc:u};function p(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"aggregations"},"Aggregations"),(0,n.kt)("p",null,"Aggregations are a way to summarize data over a time window. They are used to calculate the feature value, and are\ndefined in the ",(0,n.kt)("a",{parentName:"p",href:"../feature-builders/"},"Builder")," of the feature."),(0,n.kt)("p",null,"Since aggregations are quite complex to achieve in a production system, Raptor allow you to define them in a declarative\nway, and then it will take care of the implementation."),(0,n.kt)("h2",{id:"aggregation-types"},"Aggregation Types"),(0,n.kt)("p",null,"Raptor supports the following aggregation types:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Count")," - Counts the number of values in the time window."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Sum")," - Sums the values in the time window."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Average")," - Calculates the average of the values in the time window."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Min")," - Calculates the minimum value in the time window."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Max")," - Calculates the maximum value in the time window.")),(0,n.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,n.kt)("p",null,"Raptor implements aggregations differently in production, and in development/training mode:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"In development mode, Raptor will use native Pandas to aggregate the data over the whole dataset."),(0,n.kt)("li",{parentName:"ol"},'In production mode, since we don\'t have the whole dataset yet, Raptor uses the "bucketing algorithm" to aggregate the\ndata over the time window.')),(0,n.kt)("h2",{id:"how-does-it-work-in-production"},"How does it work in production?"),(0,n.kt)("p",null,"In production, we are required to achieve a quick latency, scalability and cost-effectiveness. Considering these\nrequirements, we cannot recalculate the aggregation on every request and go through all of our data points."),(0,n.kt)("p",null,'To achieve that, we are using a "bucketing algorithm" that will split the calculation over a smaller granularity(\nbuckets), and then aggregate the results.'),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Raptor&#39;s_bucketing_algorithm",src:r(3490).Z,width:"490",height:"178"})),(0,n.kt)("p",null,"In the example above, we are calculating the Sum of the values over the last ",(0,n.kt)("em",{parentName:"p"},"1 hour"),", with a ",(0,n.kt)("em",{parentName:"p"},"5 minutes")," granularity.\nThat means that we will get the sum of the values over the last hour with an accuracy of 5 minutes."),(0,n.kt)("p",null,"To achieve that, we will split the time window into 12 buckets, each bucket will include the sum of the values over a\nperiod of 5 minutes, then we will summarize the results of the buckets to get the final result."))}p.isMDXComponent=!0},3490:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/aggr-bucketing-algo.drawio-d5ba5d3533405a97c953f109407ad961.png"}}]);