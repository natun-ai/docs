"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7175],{84907:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var o=r(39953);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),u=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),l=u(r),m=n,f=l["".concat(c,".").concat(m)]||l[m]||p[m]||a;return r?o.createElement(f,s(s({ref:t},d),{},{components:r})):o.createElement(f,s({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:n,s[1]=i;for(var u=2;u<a;u++)s[u]=r[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},50224:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=r(1943),n=(r(39953),r(84907));const a={},s="How does Raptor work?",i={unversionedId:"docs/how-it-works/README",id:"docs/how-it-works/README",title:"How does Raptor work?",description:"This section is considered an advanced topic, and it's not required to read it in order to start building",source:"@site/docs/docs/how-it-works/README.md",sourceDirName:"docs/how-it-works",slug:"/docs/how-it-works/",permalink:"/docs/how-it-works/",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/how-it-works/README.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Common use-cases",permalink:"/docs/concepts/common"},next:{title:"DataSources",permalink:"/docs/how-it-works/datasources/"}},c={},u=[],d={toc:u};function l(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"how-does-raptor-work"},"How does Raptor work?"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"This section is considered an advanced topic, and it's not required to read it in order to start building\nproduction-ready models."),(0,n.kt)("p",{parentName:"admonition"},'Since most of the "heavy duty" work, and the complex parts are related to the "production running" - this section is\nmostly focused on it, and on the "Raptor Core" component.')),(0,n.kt)("p",null,'Raptor is extending Kubernetes to serve features and models in a production-grade manner. It\'s implementing the\n"Kubernetes Way," which advocates for writing the desired state and allows you to focus on writing the business logic.\nRaptor takes care of the engineering concerns of implementing the "desired state" by managing and controlling\nKubernetes-native resources such as deployments to connect your production data-sources and to run your business logic\nat scale.'),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"/assets/high-level-diagram.png",alt:"High level architecture"})),(0,n.kt)("p",null,"To achieve that, Raptor must understand the logic of your asset and create the engineering setup required for the\nproduction version."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Raptor Assets are usually stored in Git, like any other Kubernetes' manifest you have in your organization.\nThis approach carries benefits such as review and comparison for every change, an ability to see previous versions, etc.")),(0,n.kt)("p",null,'Feature and Models Definitions only become available after Raptor Operator spins off the necessary compute, connections,\nand storage resources needed for it.\nWe recommend using your CI/CD to deploy the Feature Definitions to the Kubernetes cluster, as you do with any other\nKubernetes resource. Applying your DevOps policies like code-review or "staging first" can be very useful and can\nfinally make DS resources an integral part of your RND.'),(0,n.kt)("p",null,"After the Assets have been deployed to your cluster, Raptor Operator automatically discovers them and uses\nthe relevant Builder to configure the resources needed for the Feature. Such\nresources include ",(0,n.kt)("a",{parentName:"p",href:"/docs/how-it-works/datasources"},"DataSource")," to external sources, storage\nresources, and compute resources."),(0,n.kt)("p",null,"Finally, after the Assets are deployed, you can access the Feature Values and Model predictions using the REST or gRPC\nAPIs."))}l.isMDXComponent=!0}}]);