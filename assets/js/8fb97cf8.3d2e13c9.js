"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6274],{5719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(4964),s=n(1523);const i={},a="Models",o={id:"docs/concepts/models",title:"Models",description:"Building production-ready models with Raptor is easy. You can use any model framework you want, and Raptor will take",source:"@site/docs/docs/concepts/6-models.md",sourceDirName:"docs/concepts",slug:"/docs/concepts/models",permalink:"/docs/concepts/models",draft:!1,unlisted:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/concepts/6-models.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"docs",previous:{title:'Derived feature (like "join")',permalink:"/docs/concepts/derived"},next:{title:"Common use-cases",permalink:"/docs/concepts/common"}},d={},l=[{value:"Getting the training data",id:"getting-the-training-data",level:2},{value:"Training the model locally before exporting it",id:"training-the-model-locally-before-exporting-it",level:2},{value:"Key Feature",id:"key-feature",level:2},{value:"Setting the key feature",id:"setting-the-key-feature",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"models",children:"Models"}),"\n",(0,r.jsx)(t.p,{children:"Building production-ready models with Raptor is easy. You can use any model framework you want, and Raptor will take\ncare of the rest."}),"\n",(0,r.jsx)(t.p,{children:"To do that, you'll need to define the training function, and specify it's input features, label(also a feature), and\nthe model framework you're using."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:"@model(\n  keys=['customer_id'],\n  input_features=['total_spend+sum'],\n  input_labels=[amount],\n  model_framework='sklearn',\n  model_server='sagemaker-ack',\n)\n@freshness(max_age='1h', max_stale='100h')\ndef amount_prediction(ctx: TrainingContext):\n  from sklearn.linear_model import LinearRegression\n\n  df = ctx.features_and_labels()\n\n  trainer = LinearRegression()\n  trainer.fit(df[ctx.input_features], df[ctx.input_labels])\n\n  return trainer\n"})}),"\n",(0,r.jsxs)(t.admonition,{title:"When should we use Feature Selectors?",type:"note",children:[(0,r.jsxs)(t.p,{children:["You might notice that we're using a feature selector in the ",(0,r.jsx)(t.code,{children:"input_features"})," field. Feature Selectors are a way to reference a specific representation of a feature."]}),(0,r.jsxs)(t.p,{children:["When we want to add a feature that have an aggregation, we must use a selector to reference it: ",(0,r.jsx)(t.code,{children:"<name>+<aggrFn>"}),"."]}),(0,r.jsxs)(t.p,{children:["For more information, see ",(0,r.jsx)(t.a,{href:"/docs/how-it-works/selectors",children:"Feature Selectors"}),"."]})]}),"\n",(0,r.jsx)(t.h2,{id:"getting-the-training-data",children:"Getting the training data"}),"\n",(0,r.jsxs)(t.p,{children:["To get the training data, we can use the ",(0,r.jsx)(t.code,{children:"features_and_labels()"})," function of the training context."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:"df = ctx.features_and_labels()\n"})}),"\n",(0,r.jsx)(t.p,{children:"This will return a pandas dataframe that contains the features and labels."}),"\n",(0,r.jsxs)(t.p,{children:["To get the features, we can use the ",(0,r.jsx)(t.code,{children:"input_features"})," field of the training context."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:"df[ctx.input_features]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Or, we can split the data to training set and test set:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n  df[ctx.input_features],\n  df[ctx.input_labels],\n  test_size=0.2,\n  random_state=42,\n)\n"})}),"\n",(0,r.jsx)(t.h2,{id:"training-the-model-locally-before-exporting-it",children:"Training the model locally before exporting it"}),"\n",(0,r.jsx)(t.p,{children:"Sometimes, we want to train the model locally before exporting it. This is useful when we want to iterate and experiment\nwith the model."}),"\n",(0,r.jsxs)(t.p,{children:["To do that, we can use the new ",(0,r.jsx)(t.code,{children:"train()"})," method of training function"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:"mymodel = amount_prediction()\n\n# %%\n\ndata = amount_prediction.features_and_labels()\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n\nx = data[amount_prediction.input_features]\ny = data[amount_prediction.input_labels]\n_, x_test, _, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=1234)\n\ny_pred = mymodel.predict(x_test)\nres = classification_report(y_pred, y_test.values.ravel())\n"})}),"\n",(0,r.jsx)(t.h2,{id:"key-feature",children:"Key Feature"}),"\n",(0,r.jsx)(t.p,{children:"The key feature is the feature that we used to join the rest of the features with, i.e.:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"timestamp"}),(0,r.jsx)(t.th,{children:"entity_id"}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.em,{children:"feature_1"})}),(0,r.jsx)(t.th,{children:"feature_2"}),(0,r.jsx)(t.th,{children:"feature_3"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"10:00"}),(0,r.jsx)(t.td,{children:"10"}),(0,r.jsx)(t.td,{children:"..."}),(0,r.jsx)(t.td,{children:"..."}),(0,r.jsx)(t.td,{children:"..."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"10:01"}),(0,r.jsx)(t.td,{children:"10"}),(0,r.jsx)(t.td,{children:"..."}),(0,r.jsx)(t.td,{children:"..."}),(0,r.jsx)(t.td,{children:"..."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"10:02"}),(0,r.jsx)(t.td,{children:"10"}),(0,r.jsx)(t.td,{children:"..."}),(0,r.jsx)(t.td,{children:"..."}),(0,r.jsx)(t.td,{children:"..."})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["As you see in the table below, we are using the key feature (",(0,r.jsx)(t.code,{children:"feature_1"}),") timestamps to join the rest of the features -\nthat means that we are getting the feature value of the rest of the features at the same time as the key feature."]}),"\n",(0,r.jsx)(t.h3,{id:"setting-the-key-feature",children:"Setting the key feature"}),"\n",(0,r.jsxs)(t.p,{children:["The key feature is defined as the ",(0,r.jsx)(t.strong,{children:"first"})," feature in the feature set. Alternatively, you can set the key feature using\nthe options of the decorator:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:"@model(\n  key_feature='feature_1',\n  ...\n)\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1523:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6504);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);