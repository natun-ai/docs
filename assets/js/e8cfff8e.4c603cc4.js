"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8620],{4907:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(9953);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(a),c=r,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1772:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var n=a(1943),r=(a(9953),a(4907));const l={},i="Decorators",o={unversionedId:"reference/labsdk/decorators",id:"reference/labsdk/decorators",title:"Decorators",description:"The LabSDK provides a set of decorators that can be used to configure the assets in a way that can be translated to an",source:"@site/docs/reference/labsdk/decorators.md",sourceDirName:"reference/labsdk",slug:"/reference/labsdk/decorators",permalink:"/reference/labsdk/decorators",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/labsdk/decorators.md",tags:[],version:"current",frontMatter:{},sidebar:"reference",previous:{title:"LabSDK",permalink:"/reference/labsdk/"},next:{title:"Exporting to production",permalink:"/reference/labsdk/export"}},s={},u=[{value:"Shared Decorators",id:"shared-decorators",level:2},{value:"<code>namespace</code>",id:"namespace",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Example",id:"example",level:4},{value:"<code>runtime</code>",id:"runtime",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Example",id:"example-1",level:4},{value:"<code>freshness</code>",id:"freshness",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Example",id:"example-2",level:4},{value:"<code>labels</code>",id:"labels",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Example",id:"example-3",level:4},{value:"<code>data_source</code>",id:"data_source",level:2},{value:"Class",id:"class",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example-4",level:4},{value:"Feature Decorators",id:"feature-decorators",level:2},{value:"<code>aggregation</code>",id:"aggregation",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Example",id:"example-5",level:4},{value:"<code>keep_previous</code>",id:"keep_previous",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Example",id:"example-6",level:4},{value:"<code>feature</code>",id:"feature",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Function Signature",id:"function-signature",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-7",level:3},{value:"Model Decorators",id:"model-decorators",level:2},{value:"<code>model</code>",id:"model",level:3},{value:"Function Signature",id:"function-signature-1",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Return",id:"return",level:4},{value:"Example",id:"example-8",level:4}],p={toc:u};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"decorators"},"Decorators"),(0,r.kt)("p",null,"The LabSDK provides a set of decorators that can be used to configure the assets in a way that can be translated to an\noptimized production-ready solution by Raptor."),(0,r.kt)("h2",{id:"shared-decorators"},"Shared Decorators"),(0,r.kt)("h3",{id:"namespace"},(0,r.kt)("inlineCode",{parentName:"h3"},"namespace")),(0,r.kt)("p",null,"This decorator is used to register a namespace for the asset."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"namespace_name")," - The name of the namespace.")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@namespace('namespace_name')\n")),(0,r.kt)("h3",{id:"runtime"},(0,r.kt)("inlineCode",{parentName:"h3"},"runtime")),(0,r.kt)("p",null,"This decorator is used to register the runtime environment for the asset."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"packages")," - A list of packages to install in the runtime environment."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"env_name")," - The name of the runtime environment. The environment should be pre-configured in Raptor Core by your\nDevOps\nteam. By default, only the ",(0,r.kt)("inlineCode",{parentName:"li"},"default")," environment is available.")),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@runtime(packages=['numpy==1.21.1', 'phonenumbers'], env_name='default')\n")),(0,r.kt)("h3",{id:"freshness"},(0,r.kt)("inlineCode",{parentName:"h3"},"freshness")),(0,r.kt)("p",null,"This decorator is used to set the freshness policy and timeout of a feature or model. It must be used in conjunction\nwith a feature or model decorator."),(0,r.kt)("p",null,"Feature or Model values are considered fresh if they are younger than the ",(0,r.kt)("inlineCode",{parentName:"p"},"max_age"),".\nIf the value is older than ",(0,r.kt)("inlineCode",{parentName:"p"},"max_age"),", we'll try to recompute it with a timeout of ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout"),".\nIf we fail to recompute the value within ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout"),", we'll return the stale value as long as it is younger than\n",(0,r.kt)("inlineCode",{parentName:"p"},"max_stale"),"."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_age")," - The maximum age of a feature or model value. If the value is older than ",(0,r.kt)("inlineCode",{parentName:"li"},"max_age"),", we'll try to recompute\nit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_stale")," - The maximum age of a stale feature or model value. If the value is older than ",(0,r.kt)("inlineCode",{parentName:"li"},"max_stale"),", we'll return\n",(0,r.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeout")," - The timeout for re-computing a feature or model value.")),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@freshness(max_age="2h", max_stale="3h", timeout="1m")\n')),(0,r.kt)("h3",{id:"labels"},(0,r.kt)("inlineCode",{parentName:"h3"},"labels")),(0,r.kt)("p",null,"This decorator is used to register labels for the asset."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"labels")," - A dictionary of labels.")),(0,r.kt)("h4",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@labels({"owner": "Almog", "team": "ds"})\n')),(0,r.kt)("h2",{id:"data_source"},(0,r.kt)("inlineCode",{parentName:"h2"},"data_source")),(0,r.kt)("p",null,"This decorator is used to register a DataSource for the Feature Definition."),(0,r.kt)("h4",{id:"class"},"Class"),(0,r.kt)("p",null,"This decorator should wrap a class that inherits from ",(0,r.kt)("inlineCode",{parentName:"p"},"typing_extensions.TypedDict"),", the class content is optional and\nshould reflect the schema of the data source."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"training_data")," - DataFrame of training data. This should reflect the schema of the data source in production."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keys")," - List of columns that are keys."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - Name of the data source. Defaults to the class name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timestamp")," - Name of the timestamp column. If not specified, the timestamp is inferred from the training data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"production_config")," - This is a stub for the production configuration. It is not used in training, but is helpful\nfor making sense of the source, the production behavior, and a preparation for the production deployment.")),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,"It returns a wrapped class with a few additional methods/properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raptor_spec")," - The Raptor specification of the data source."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"manifest(to_file=False)")," - A function that returns the manifest of the data source."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export()")," - A function that exports the data source to the ",(0,r.kt)("inlineCode",{parentName:"li"},"out")," directory.")),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@data_source(\n    training_data=pd.read_csv(\n        'https://gist.githubusercontent.com/AlmogBaku/8be77c2236836177b8e54fa8217411f2/raw/deals.csv'),\n    keys=['id', 'account_id'],\n    timestamp='event_at',\n)\nclass Deal(TypedDict):\n    id: int\n    event_at: pd.Timestamp\n    account_id: str\n    amount: float\n")),(0,r.kt)("h2",{id:"feature-decorators"},"Feature Decorators"),(0,r.kt)("h3",{id:"aggregation"},(0,r.kt)("inlineCode",{parentName:"h3"},"aggregation")),(0,r.kt)("p",null,"Register aggregations for the Feature Definition."),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function")," - A list of :func:",(0,r.kt)("inlineCode",{parentName:"li"},"AggrFn")," or a list of aggregation functions as strings."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"over")," - The time period over which to aggregate."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"granularity")," - The granularity of the aggregation (this is overriding the freshness).")),(0,r.kt)("h4",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@aggregation(\n    function=['sum', 'count', 'avg'],\n    over='1d',\n    granularity='1h',\n)\n")),(0,r.kt)("h3",{id:"keep_previous"},(0,r.kt)("inlineCode",{parentName:"h3"},"keep_previous")),(0,r.kt)("p",null,"Keep previous versions of the feature."),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"versions")," - The number of versions to keep (excluding the current value)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"over")," - The maximum time period to keep a previous values in the history since the last update. You can specify ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"\nto keep the value until the next update.")),(0,r.kt)("h4",{id:"example-6"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@keep_previous(versions=3, over='1d')\n")),(0,r.kt)("h3",{id:"feature"},(0,r.kt)("inlineCode",{parentName:"h3"},"feature")),(0,r.kt)("p",null,"Register a Feature Definition within the LabSDK."),(0,r.kt)("p",null,"A feature definition is a Python handler function that process a calculation request and calculates the feature value."),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keys")," - A list of indexing keys, indicated the owner of the feature value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - The name of the feature. If not provided, the function name will be used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data_source")," - The (fully qualified) name of the DataSource."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceless_markers_df")," - A DataFrame with the timestamp and keys markers for training sourceless features. It\na timestamp column, and a column for each key.")),(0,r.kt)("h3",{id:"function-signature"},"Function Signature"),(0,r.kt)("p",null,"The function signature of a feature definition must accept two arguments:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"this_row")," - A dictionary of the current row (this is reflects the schema of the data source)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Context")," - A dictionary of the context. See ",(0,r.kt)("a",{parentName:"li",href:"/reference/how-does-raptor-work/features/context"},"Context")," for\nmore details.")),(0,r.kt)("p",null,"It must use a return type annotation to indicate the primitive type of the feature value."),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"It returns a wrapped function with a few additional methods/properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raptor_spec")," - The Raptor specification of the feature."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replay()")," - A function that can be used to replay the feature calculation using the training sata of the source."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"manifest(to_file=False)")," - A function that returns the manifest of the feature."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export(with_dependent_source=True)")," - A function that exports the feature to ",(0,r.kt)("inlineCode",{parentName:"li"},"out")," directory.")),(0,r.kt)("h3",{id:"example-7"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@feature(keys='account_id', data_source=Deal)\n@freshness(max_age='1h', max_stale='2h')\ndef last_amount(this_row: Deal, ctx: Context) -> float:\n    return this_row['amount']\n\n")),(0,r.kt)("h2",{id:"model-decorators"},"Model Decorators"),(0,r.kt)("h3",{id:"model"},(0,r.kt)("inlineCode",{parentName:"h3"},"model")),(0,r.kt)("p",null,"Register a Model Definition within the LabSDK."),(0,r.kt)("h4",{id:"function-signature-1"},"Function Signature"),(0,r.kt)("p",null,"This decorator should wrap a training function that returns a trained model."),(0,r.kt)("p",null,"The function signature of a model definition must accept ",(0,r.kt)("inlineCode",{parentName:"p"},"TrainingContext")," as an argument."),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keys")," - The keys of the model. The keys are required for fetching the features."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_features")," - The features that are used as input to the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_labels")," - The labels that are used as input to the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"model_framework")," - The model framework used to train the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"model_server")," - The model server used to serve the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key_feature")," - The feature that is used for joining the features together."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prediction_output_schema")," - The schema of the prediction output."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," - The name of the model. If not provided, the name will be the function name.")),(0,r.kt)("h4",{id:"return"},"Return"),(0,r.kt)("p",null,"A training function with provided context."),(0,r.kt)("p",null,"It also provides a few new methods/properties to the returned function:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raptor_spec")," - The Raptor spec of the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"train()")," - The training function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"features_and_labels()")," - A function that returns a DataFrame of the features and labels."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"manifest(to_file=False)")," - A function that returns the manifest of the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export(with_dependent_features=True, with_dependent_sources=True)")," - A function that exports the model to the ",(0,r.kt)("inlineCode",{parentName:"li"},"out")," directory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keys")," - the keys of the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_features")," - the input features of the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_labels")," - the input labels of the model.")),(0,r.kt)("h4",{id:"example-8"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@model(\n    keys=['customer_id'],\n    input_features=['total_spend+sum'],\n    input_labels=[amount],\n    model_framework='sklearn',\n    model_server='sagemaker-ack',\n)\n@freshness(max_age='1h', max_stale='100h')\ndef amount_prediction(ctx: TrainingContext):\n    from sklearn.linear_model import LinearRegression\n\n    df = ctx.features_and_labels()\n\n    trainer = LinearRegression()\n    trainer.fit(df[ctx.input_features], df[ctx.input_labels])\n\n    return trainer\n")))}m.isMDXComponent=!0}}]);