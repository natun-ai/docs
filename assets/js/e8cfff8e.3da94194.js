"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8620],{84907:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(39953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},45929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(1943),r=(n(39953),n(84907));const l={sidebar_label:"decorators",title:"decorators"},i=void 0,o={unversionedId:"reference/labsdk/decorators",id:"reference/labsdk/decorators",title:"decorators",description:"The LabSDK provides a set of decorators that can be used to configure the assets in a way that can be translated to an",source:"@site/docs/reference/labsdk/decorators.md",sourceDirName:"reference/labsdk",slug:"/reference/labsdk/decorators",permalink:"/reference/labsdk/decorators",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/labsdk/decorators.md",tags:[],version:"current",frontMatter:{sidebar_label:"decorators",title:"decorators"},sidebar:"reference",previous:{title:"config",permalink:"/reference/labsdk/config"},next:{title:"local_state",permalink:"/reference/labsdk/local_state"}},s={},p=[{value:"namespace",id:"namespace",level:4},{value:"runtime",id:"runtime",level:4},{value:"freshness",id:"freshness",level:4},{value:"labels",id:"labels",level:4},{value:"data_source",id:"data_source",level:4},{value:"aggregation",id:"aggregation",level:4},{value:"keep_previous",id:"keep_previous",level:4},{value:"feature",id:"feature",level:4},{value:"model",id:"model",level:4}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The LabSDK provides a set of decorators that can be used to configure the assets in a way that can be translated to an\noptimized production-ready solution by Raptor."),(0,r.kt)("h4",{id:"namespace"},"namespace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def namespace(namespace: str)\n")),(0,r.kt)("p",null,"Register a namespace for the asset."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"namespace")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"): the name of namespace to attach the asset to.\n",(0,r.kt)("strong",{parentName:"li"},"Example"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@namespace('my_namespace')\n")),(0,r.kt)("h4",{id:"runtime"},"runtime"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def runtime(packages: Optional[List[str]], env_name: Optional[str])\n")),(0,r.kt)("p",null,"Register the runtime environment for the asset."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"packages")," (",(0,r.kt)("inlineCode",{parentName:"li"},"list of str"),"): list of PIP installable packages. You can specify a version pip notation, e.g. 'numpy==1.19.5' or\n'numpy>=1.19.5'."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"env_name")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"): the name of the runtime virtual environment name. The environment should be pre-configured in\nthe Raptor Core installation by your DevOps. Defaults to the 'default' runtime if not specified.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("blockquote",null,(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("blockquote",{parentName:"blockquote"},(0,r.kt)("p",{parentName:"blockquote"},"@runtime(packages=","['numpy==1.21.1', 'phonenumbers']",", env_name='default')")))),(0,r.kt)("h4",{id:"freshness"},"freshness"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def freshness(max_age: Union[str, timedelta],\n              max_stale: Optional[Union[str, timedelta]] = None,\n              timeout: Optional[Union[str, timedelta]] = timedelta(seconds=1))\n")),(0,r.kt)("p",null,"Set the freshness policy, and timeout of a feature or model. It is required so Raptor will be able to match the"),(0,r.kt)("p",null,"production behaviour with the development behaviour.\nThis decorator must be used in conjunction with a feature or model decorator."),(0,r.kt)("p",null,"Feature or Model values are considered fresh if they are younger than the ",(0,r.kt)("inlineCode",{parentName:"p"},"max_age"),".\nIf the value is older than ",(0,r.kt)("inlineCode",{parentName:"p"},"max_age"),", we'll try to recompute it with a timeout of ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout"),".\nIf we fail to recompute the value within ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout"),", we'll return the stale value as long as it is younger than\n",(0,r.kt)("inlineCode",{parentName:"p"},"max_stale"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_age")," (",(0,r.kt)("inlineCode",{parentName:"li"},"timedelta or str of the form '2h 3m 4s'"),"): the maximum age of a feature or model value. If the calculated value is older than ",(0,r.kt)("inlineCode",{parentName:"li"},"max_age"),", we'll\ntry to recompute the value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_stale")," (",(0,r.kt)("inlineCode",{parentName:"li"},"timedelta or str of the form '2h 3m 4s'"),"): the time after which the feature or model is considered stale. If the\nvalue is older than ",(0,r.kt)("inlineCode",{parentName:"li"},"max_stale"),", we'll return ",(0,r.kt)("inlineCode",{parentName:"li"},"None"),". Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"max_age"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeout")," (",(0,r.kt)("inlineCode",{parentName:"li"},"timedelta or str of the form '2h 3m 4s'"),"): the maximum time allowed for the feature to be computed. defaults to 1 second.\n",(0,r.kt)("strong",{parentName:"li"},"Example"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@freshness(max_age='1h', max_stale='2h', timeout='10s')\n")),(0,r.kt)("h4",{id:"labels"},"labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def labels(labels: Dict[str, str])\n")),(0,r.kt)("p",null,"Register labels for the asset."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"labels")," (",(0,r.kt)("inlineCode",{parentName:"li"},"dict<str,str> (key, value)"),"): a dictionary of tags.\n",(0,r.kt)("strong",{parentName:"li"},"Example"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@labels({'owner': '@AlmogBaku', 'team': 'search'})\n")),(0,r.kt)("h4",{id:"data_source"},"data","_","source"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def data_source(training_data: DataFrame,\n                keys: Optional[Union[str, List[str]]] = None,\n                name: Optional[str] = None,\n                timestamp: Optional[str] = None,\n                production_config: Optional[SourceProductionConfig] = None)\n")),(0,r.kt)("p",null,"Register a DataSource asset. The data source is a class that represents the schema of the data source in production."),(0,r.kt)("p",null,"It is used to validate the data source in production and to connect the data source to the feature and model assets."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Class signature"),":"),(0,r.kt)("p",null,"This decorator should wrap a class that inherits from ",(0,r.kt)("inlineCode",{parentName:"p"},"typing_extensions.TypedDict"),", the class content is optional\nand should reflect the schema of the data source."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"training_data")," (",(0,r.kt)("inlineCode",{parentName:"li"},"DataFrame"),"): DataFrame of training data. This should reflect the schema of the data source in production."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keys")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or list of str"),"): list of columns that are keys."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"): name of the data source. Defaults to the class name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timestamp")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"): name of the timestamp column. If not specified, the timestamp is inferred from the training data.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"A wrapped class with additional methods and properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raptor_spec")," - the Raptor specification object.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"manifest(to_file: bool = False)")," - a function that returns the data source manifest. If ",(0,r.kt)("inlineCode",{parentName:"li"},"to_file")," is True,\nthe manifest is written to a file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export()")," - a function that exports the data source to the ",(0,r.kt)("inlineCode",{parentName:"li"},"out")," directory.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@data_source(\n    training_data=pd.read_csv('deals.csv'),\n    keys=['id', 'account_id'],\n    timestamp='event_at',\n)\nclass Deal(typing_extensions.TypedDict):\n    id: int\n    event_at: pd.Timestamp\n    account_id: str\n    amount: float\n    currency: str\n    is_win: bool\n")),(0,r.kt)("h4",{id:"aggregation"},"aggregation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def aggregation(function: Union[AggregationFunction, List[AggregationFunction],\n                                str, List[str]], over: Union[str, timedelta,\n                                                             None],\n                granularity: Union[str, timedelta, None])\n")),(0,r.kt)("p",null,"Registers aggregations for the Feature Definition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function")," (",(0,r.kt)("inlineCode",{parentName:"li"},"AggregationFunction or List[AggregationFunction] or str or List[str]"),"): a list of :func:",(0,r.kt)("inlineCode",{parentName:"li"},"AggrFn"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"over")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or timedelta in the form '2h 3m 4s'"),"): the time period over which to aggregate."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"granularity")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or timedelta in the form '2h 3m 4s'"),"): the granularity of the aggregation (this is overriding the freshness' ",(0,r.kt)("inlineCode",{parentName:"li"},"max_age"),").\n",(0,r.kt)("strong",{parentName:"li"},"Example"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@aggregation(\n   function=['sum', 'count', 'avg'],\n   over='1d',\n   granularity='1h',\n)\n")),(0,r.kt)("h4",{id:"keep_previous"},"keep","_","previous"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def keep_previous(versions: int, over: Union[str, timedelta])\n")),(0,r.kt)("p",null,"Keep previous versions of the feature."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"versions")," (",(0,r.kt)("inlineCode",{parentName:"li"},"int"),"): the number of versions to keep (excluding the current value)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"over")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or timedelta in the form '2h 3m 4s'"),"): the maximum time period to keep a previous values in the history since the last update. You can specify\n",(0,r.kt)("inlineCode",{parentName:"li"},"0")," to keep the value until the next update.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@keep_previous(versions=3, over='1d')\n")),(0,r.kt)("h4",{id:"feature"},"feature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def feature(keys: Union[str, List[str]],\n            name: Optional[str] = None,\n            data_source: Optional[Union[str, object]] = None,\n            sourceless_markers_df: Optional[DataFrame] = None)\n")),(0,r.kt)("p",null,"Registers a Feature Definition within the LabSDK."),(0,r.kt)("p",null,"A feature definition is a Python handler function that process a calculation request and calculates the feature\nvalue."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Feature signature"),":"),(0,r.kt)("p",null,"The function signature of a feature definition must accept two arguments:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"this_row")," - A dictionary of the current row (this is reflects the schema of the data source)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Context")," - A dictionary of the context. See ",(0,r.kt)("a",{parentName:"li",href:"/docs/how-it-works/features/context"},"Context")," for\nmore details.")),(0,r.kt)("p",null,"It must use a return type annotation to indicate the primitive type of the feature value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keys")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or List[str]"),"): a list of indexing keys, indicated the owner of the feature value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"): the name of the feature. If not provided, the function name will be used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data_source")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or DataSource object"),"): the (fully qualified) name of the DataSource or a reference to the DataSource object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sourceless_markers_df")," (",(0,r.kt)("inlineCode",{parentName:"li"},"DataFrame"),"): a DataFrame with the timestamp and keys markers for training sourceless features. It\na timestamp column, and a column for each key.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"function"),": It returns a wrapped function with a few additional methods/properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raptor_spec")," - The Raptor specification of the feature.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replay()")," - A function that can be used to replay the feature calculation using the training sata of the source."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"manifest(to_file=False)")," - A function that returns the manifest of the feature."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export(with_dependent_source=True)")," - A function that exports the feature to ",(0,r.kt)("inlineCode",{parentName:"li"},"out")," directory.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@feature(keys='account_id', data_source=Deal)\n@freshness(max_age='1h', max_stale='2h')\ndef last_amount(this_row: Deal, ctx: Context) -> float:\n    return this_row['amount']\n")),(0,r.kt)("h4",{id:"model"},"model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def model(keys: Union[str, List[str]],\n          input_features: Union[str, List[str], Callable, List[Callable]],\n          input_labels: Union[str, List[str], Callable, List[Callable]],\n          model_framework: Union[ModelFramework, str],\n          model_server: Optional[Union[ModelServer, str]] = None,\n          key_feature: Optional[Union[str, Callable]] = None,\n          prediction_output_schema: Optional[TypedDict] = None,\n          name: Optional[str] = None)\n")),(0,r.kt)("p",null,"Register a Model Definition within the LabSDK."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function Signature"),":"),(0,r.kt)("p",null,"This decorator should wrap a training function that returns a trained model.\nThe function signature of a model definition must accept ",(0,r.kt)("inlineCode",{parentName:"p"},"TrainingContext")," as an argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keys")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or list of str"),"): the keys of the model. The keys are required for fetching the features."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_features")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or list of str or callable or list of callable"),"): the features that are used as input to the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_labels")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or list of str or callable or list of callable"),"): the labels that are used as input to the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"model_framework")," (",(0,r.kt)("inlineCode",{parentName:"li"},"ModelFramework or str"),"): the model framework used to train the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"model_server")," (",(0,r.kt)("inlineCode",{parentName:"li"},"ModelServer or str"),"): the model server used to serve the model."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key_feature")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str or callable"),"): the feature that is used for joining the features together."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prediction_output_schema")," (",(0,r.kt)("inlineCode",{parentName:"li"},"TypedDict"),"): the schema of the prediction output."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"): the name of the model. If not provided, the name will be the function name.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"`function\n",(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@model(\n    keys=['customer_id'],\n    input_features=['total_spend+sum'],\n    input_labels=[amount],\n    model_framework='sklearn',\n    model_server='sagemaker-ack',\n)\n@freshness(max_age='1h', max_stale='100h')\ndef amount_prediction(ctx: TrainingContext):\n    from sklearn.linear_model import LinearRegression\n\n    df = ctx.features_and_labels()\n\n    trainer = LinearRegression()\n    trainer.fit(df[ctx.input_features], df[ctx.input_labels])\n\n    return trainer\n````: a wrapped function `train()` that runs your training function with the `TrainingContext` provided.\nIt also provides a few new methods/properties to the returned function:\n\n* `raptor_spec` - The Raptor spec of the model.\n* `train()` - The training function.\n* `features_and_labels()` - A function that returns a DataFrame of the features and labels.\n* `manifest(to_file=False)` - A function that returns the manifest of the model.\n* `export(with_dependent_features=True, with_dependent_sources=True)` - A function that exports the model to the `out` directory.\n* `keys` - the keys of the model.\n* `input_features` - the input features of the model.\n* `input_labels` - the input labels of the model.\n")))}m.isMDXComponent=!0}}]);