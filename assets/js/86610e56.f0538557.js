"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[346],{2705:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=s(4964),r=s(1523);const o={title:'Derived feature (like "join")'},c=void 0,i={id:"docs/concepts/derived",title:'Derived feature (like "join")',description:'Raptor is introducing a new way to join between pieces of data - "dependencies".',source:"@site/docs/docs/concepts/5-derived.md",sourceDirName:"docs/concepts",slug:"/docs/concepts/derived",permalink:"/docs/concepts/derived",draft:!1,unlisted:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/concepts/5-derived.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:'Derived feature (like "join")'},sidebar:"docs",previous:{title:"Sourceless features",permalink:"/docs/concepts/sourceless"},next:{title:"Models",permalink:"/docs/concepts/models"}},a={},d=[{value:"Quick example",id:"quick-example",level:2},{value:"Using with sourceless features",id:"using-with-sourceless-features",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:'Raptor is introducing a new way to join between pieces of data - "dependencies".'}),"\n",(0,n.jsxs)(t.p,{children:["As explained ",(0,n.jsx)(t.a,{href:"/docs/concepts/basics",children:"earlier"}),', we write features as functions and working in the context of a "row-level"\napproach.']}),"\n",(0,n.jsx)(t.p,{children:'To implement a feature that "joins" a data from two different sources, we just need to call another feature that\ncalculates the data we need.'}),"\n",(0,n.jsx)(t.h2,{id:"quick-example",children:"Quick example"}),"\n",(0,n.jsx)(t.p,{children:'A relatively simple example for this is the following "rate" feature:'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:'@feature(keys=["user_id"], sourceless_markers_df=markers_df)  # sourceless_markers_df is used for training\n@freshness(max_age=\'1m\', max_stale=\'10h\')\ndef views_purchases_rate(_, ctx: Context) -> float:\n  """rate of two views and purchases"""\n  views, _ = ctx.get_feature("views+count")\n  purchases, _ = ctx.get_feature("purchases+count")\n  return views / purchases\n'})}),"\n",(0,n.jsxs)(t.p,{children:["In this code, we're using the ",(0,n.jsx)(t.a,{href:"/docs/how-it-works/features/context#get_featureselector-str-keys-dictstr-str--none",children:(0,n.jsx)(t.code,{children:"feature_get()"})})," function\nto request the values of ",(0,n.jsx)(t.code,{children:"views+count"})," and ",(0,n.jsx)(t.code,{children:"purchases+count"})," for our ",(0,n.jsx)(t.code,{children:"user_id"})," key(by default, the function propagate\nthe keys). Then, we return the rate of the two. Simple right?"]}),"\n",(0,n.jsx)(t.h2,{id:"using-with-sourceless-features",children:"Using with sourceless features"})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},1523:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>i});var n=s(6504);const r={},o=n.createContext(r);function c(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);