"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5345],{3831:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>h});var n=s(4964),r=s(1523);const i={},o="Freshness Guarantees",a={id:"docs/how-it-works/freshness",title:"Freshness Guarantees",description:"Production systems expect strict service guarantees that ensures the quality of the service for the end-user.",source:"@site/docs/docs/how-it-works/freshness.md",sourceDirName:"docs/how-it-works",slug:"/docs/how-it-works/freshness",permalink:"/docs/how-it-works/freshness",draft:!1,unlisted:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/how-it-works/freshness.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Feature Values",permalink:"/docs/how-it-works/features/feature-values"},next:{title:"Historical Data and Retraining",permalink:"/docs/how-it-works/historical-data-and-backfill"}},d={},h=[{value:"Freshness definition",id:"freshness-definition",level:2},{value:"How does it work?",id:"how-does-it-work",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"freshness-guarantees",children:"Freshness Guarantees"}),"\n",(0,n.jsxs)(t.p,{children:["Production systems expect strict ",(0,n.jsx)(t.strong,{children:"service guarantees"})," that ensures the quality of the service for the end-user."]}),"\n",(0,n.jsxs)(t.p,{children:["To implement that, you should define a desired ",(0,n.jsx)(t.strong,{children:"Service Layer Agreement"})," for your features, and Raptor will build a\ncustomized implementation for you features that meet these guarantees."]}),"\n",(0,n.jsx)(t.p,{children:'Another way to look at it is to think of the Freshness Guarantees as a set of rules that defines what is the "current\nstate" of the world.'}),"\n",(0,n.jsx)(t.h2,{id:"freshness-definition",children:"Freshness definition"}),"\n",(0,n.jsxs)(t.p,{children:["When creating the Feature or a Model Definition, you specify three important values: ",(0,n.jsxs)(t.strong,{children:[(0,n.jsx)(t.code,{children:"max_age"}),", ",(0,n.jsx)(t.code,{children:"max_stale"}),",\nand ",(0,n.jsx)(t.code,{children:"timeout"}),"."]})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"/assets/freshness.png",alt:"Freshness Guarantees illustration"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"max_age"})})," - Is the age of a data that is considered fresh. When the data is fresh, we don't need to compute it\nagain."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"max_stale"})})," - If we don't have a fresh value, we might use a stale value as a fallback, as long as it's not too\nstale(as defined in the ",(0,n.jsx)(t.code,{children:"max_stale"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.code,{children:"timeout"})})," - Is the maximum time that we can wait for the data to be computed. If the timeout is exceeded, we\nwill either return a stale data(if we have it), or through an error."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"how-does-it-work",children:"How does it work?"}),"\n",(0,n.jsx)(t.p,{children:"Under the hood, Raptor configures the necessary data-sources, storage, and compute resources to ensure that your\nfeatures meet the Freshness guarantees."}),"\n",(0,n.jsx)(t.p,{children:"When a value is requested, Raptor:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Check if we have a ",(0,n.jsx)(t.strong,{children:"fresh"})," value for the feature. If we do, return it."]}),"\n",(0,n.jsxs)(t.li,{children:["If the data we have is not ",(0,n.jsx)(t.em,{children:"fresh"}),", but it's not past the ",(0,n.jsx)(t.em,{children:"max_stale"})," yet, we will compute the data again, and return\nit.","\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["If the data is computed ",(0,n.jsxs)(t.strong,{children:["before the ",(0,n.jsx)(t.code,{children:"timeout"})]}),", return it."]}),"\n",(0,n.jsxs)(t.li,{children:["If the data is computed ",(0,n.jsxs)(t.strong,{children:["after the ",(0,n.jsx)(t.code,{children:"timeout"})]}),", return the stale data, and compute the data in the background\nfor future usage."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"If we don't have a stale data, and the timeout is exceeded, return an error."}),"\n",(0,n.jsxs)(t.li,{children:["Stale data past the ",(0,n.jsx)(t.code,{children:"max_stale"})," age is never returned. Instead, the Historian is recording it for future usage, and\nwe delete it from the State."]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1523:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(6504);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);