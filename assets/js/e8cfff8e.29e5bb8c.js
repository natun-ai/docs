"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4394],{9734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=t(4964),r=t(1523);const i={sidebar_label:"decorators",title:"decorators"},a=void 0,o={id:"reference/labsdk/decorators",title:"decorators",description:"The LabSDK provides a set of decorators that can be used to configure the assets in a way that can be translated to an",source:"@site/docs/reference/labsdk/decorators.md",sourceDirName:"reference/labsdk",slug:"/reference/labsdk/decorators",permalink:"/reference/labsdk/decorators",draft:!1,unlisted:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/labsdk/decorators.md",tags:[],version:"current",frontMatter:{sidebar_label:"decorators",title:"decorators"},sidebar:"reference",previous:{title:"config",permalink:"/reference/labsdk/config"},next:{title:"local_state",permalink:"/reference/labsdk/local_state"}},l={},c=[{value:"namespace",id:"namespace",level:4},{value:"runtime",id:"runtime",level:4},{value:"freshness",id:"freshness",level:4},{value:"labels",id:"labels",level:4},{value:"data_source",id:"data_source",level:4},{value:"aggregation",id:"aggregation",level:4},{value:"keep_previous",id:"keep_previous",level:4},{value:"feature",id:"feature",level:4},{value:"model",id:"model",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The LabSDK provides a set of decorators that can be used to configure the assets in a way that can be translated to an\noptimized production-ready solution by Raptor."}),"\n",(0,s.jsx)(n.h4,{id:"namespace",children:"namespace"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def namespace(namespace: str)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Register a namespace for the asset."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"namespace"})," (",(0,s.jsx)(n.code,{children:"str"}),"): the name of namespace to attach the asset to.\n",(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@namespace('my_namespace')\n"})}),"\n",(0,s.jsx)(n.h4,{id:"runtime",children:"runtime"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def runtime(packages: Optional[List[str]], env_name: Optional[str])\n"})}),"\n",(0,s.jsx)(n.p,{children:"Register the runtime environment for the asset."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"packages"})," (",(0,s.jsx)(n.code,{children:"list of str"}),"): list of PIP installable packages. You can specify a version pip notation, e.g. 'numpy==1.19.5' or\n'numpy>=1.19.5'."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"env_name"})," (",(0,s.jsx)(n.code,{children:"str"}),"): the name of the runtime virtual environment name. The environment should be pre-configured in\nthe Raptor Core installation by your DevOps. Defaults to the 'default' runtime if not specified."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"@runtime(packages=['numpy==1.21.1', 'phonenumbers'], env_name='default')"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"freshness",children:"freshness"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def freshness(max_age: Union[str, timedelta],\n              max_stale: Optional[Union[str, timedelta]] = None,\n              timeout: Optional[Union[str, timedelta]] = timedelta(seconds=1))\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set the freshness policy, and timeout of a feature or model. It is required so Raptor will be able to match the"}),"\n",(0,s.jsx)(n.p,{children:"production behaviour with the development behaviour.\nThis decorator must be used in conjunction with a feature or model decorator."}),"\n",(0,s.jsxs)(n.p,{children:["Feature or Model values are considered fresh if they are younger than the ",(0,s.jsx)(n.code,{children:"max_age"}),".\nIf the value is older than ",(0,s.jsx)(n.code,{children:"max_age"}),", we'll try to recompute it with a timeout of ",(0,s.jsx)(n.code,{children:"timeout"}),".\nIf we fail to recompute the value within ",(0,s.jsx)(n.code,{children:"timeout"}),", we'll return the stale value as long as it is younger than\n",(0,s.jsx)(n.code,{children:"max_stale"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_age"})," (",(0,s.jsx)(n.code,{children:"timedelta or str of the form '2h 3m 4s'"}),"): the maximum age of a feature or model value. If the calculated value is older than ",(0,s.jsx)(n.code,{children:"max_age"}),", we'll\ntry to recompute the value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_stale"})," (",(0,s.jsx)(n.code,{children:"timedelta or str of the form '2h 3m 4s'"}),"): the time after which the feature or model is considered stale. If the\nvalue is older than ",(0,s.jsx)(n.code,{children:"max_stale"}),", we'll return ",(0,s.jsx)(n.code,{children:"None"}),". Defaults to ",(0,s.jsx)(n.code,{children:"max_age"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timeout"})," (",(0,s.jsx)(n.code,{children:"timedelta or str of the form '2h 3m 4s'"}),"): the maximum time allowed for the feature to be computed. defaults to 1 second.\n",(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@freshness(max_age='1h', max_stale='2h', timeout='10s')\n"})}),"\n",(0,s.jsx)(n.h4,{id:"labels",children:"labels"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def labels(labels: Dict[str, str])\n"})}),"\n",(0,s.jsx)(n.p,{children:"Register labels for the asset."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"labels"})," (",(0,s.jsx)(n.code,{children:"dict<str,str> (key, value)"}),"): a dictionary of tags.\n",(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@labels({'owner': '@AlmogBaku', 'team': 'search'})\n"})}),"\n",(0,s.jsx)(n.h4,{id:"data_source",children:"data_source"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def data_source(training_data: DataFrame,\n                keys: Optional[Union[str, List[str]]] = None,\n                name: Optional[str] = None,\n                timestamp: Optional[str] = None,\n                production_config: Optional[SourceProductionConfig] = None)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Register a DataSource asset. The data source is a class that represents the schema of the data source in production."}),"\n",(0,s.jsx)(n.p,{children:"It is used to validate the data source in production and to connect the data source to the feature and model assets."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Class signature"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:["This decorator should wrap a class that inherits from ",(0,s.jsx)(n.code,{children:"typing_extensions.TypedDict"}),", the class content is optional\nand should reflect the schema of the data source."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"training_data"})," (",(0,s.jsx)(n.code,{children:"DataFrame"}),"): DataFrame of training data. This should reflect the schema of the data source in production."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keys"})," (",(0,s.jsx)(n.code,{children:"str or list of str"}),"): list of columns that are keys."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," (",(0,s.jsx)(n.code,{children:"str"}),"): name of the data source. Defaults to the class name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timestamp"})," (",(0,s.jsx)(n.code,{children:"str"}),"): name of the timestamp column. If not specified, the timestamp is inferred from the training data."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"A wrapped class with additional methods and properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"raptor_spec"})," - the Raptor specification object.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"manifest(to_file: bool = False)"})," - a function that returns the data source manifest. If ",(0,s.jsx)(n.code,{children:"to_file"})," is True,\nthe manifest is written to a file."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"export()"})," - a function that exports the data source to the ",(0,s.jsx)(n.code,{children:"out"})," directory."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@data_source(\n    training_data=pd.read_csv('deals.csv'),\n    keys=['id', 'account_id'],\n    timestamp='event_at',\n)\nclass Deal(typing_extensions.TypedDict):\n    id: int\n    event_at: pd.Timestamp\n    account_id: str\n    amount: float\n    currency: str\n    is_win: bool\n"})}),"\n",(0,s.jsx)(n.h4,{id:"aggregation",children:"aggregation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def aggregation(function: Union[AggregationFunction, List[AggregationFunction],\n                                str, List[str]], over: Union[str, timedelta,\n                                                             None],\n                granularity: Union[str, timedelta, None])\n"})}),"\n",(0,s.jsx)(n.p,{children:"Registers aggregations for the Feature Definition."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"function"})," (",(0,s.jsx)(n.code,{children:"AggregationFunction or List[AggregationFunction] or str or List[str]"}),"): a list of :func:",(0,s.jsx)(n.code,{children:"AggrFn"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"over"})," (",(0,s.jsx)(n.code,{children:"str or timedelta in the form '2h 3m 4s'"}),"): the time period over which to aggregate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"granularity"})," (",(0,s.jsx)(n.code,{children:"str or timedelta in the form '2h 3m 4s'"}),"): the granularity of the aggregation (this is overriding the freshness' ",(0,s.jsx)(n.code,{children:"max_age"}),").\n",(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@aggregation(\n   function=['sum', 'count', 'avg'],\n   over='1d',\n   granularity='1h',\n)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"keep_previous",children:"keep_previous"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def keep_previous(versions: int, over: Union[str, timedelta])\n"})}),"\n",(0,s.jsx)(n.p,{children:"Keep previous versions of the feature."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"versions"})," (",(0,s.jsx)(n.code,{children:"int"}),"): the number of versions to keep (excluding the current value)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"over"})," (",(0,s.jsx)(n.code,{children:"str or timedelta in the form '2h 3m 4s'"}),"): the maximum time period to keep a previous values in the history since the last update. You can specify\n",(0,s.jsx)(n.code,{children:"0"})," to keep the value until the next update."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@keep_previous(versions=3, over='1d')\n"})}),"\n",(0,s.jsx)(n.h4,{id:"feature",children:"feature"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def feature(keys: Union[str, List[str]],\n            name: Optional[str] = None,\n            data_source: Optional[Union[str, object]] = None,\n            sourceless_markers_df: Optional[DataFrame] = None)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Registers a Feature Definition within the LabSDK."}),"\n",(0,s.jsx)(n.p,{children:"A feature definition is a Python handler function that process a calculation request and calculates the feature\nvalue."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Feature signature"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"The function signature of a feature definition must accept two arguments:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"this_row"})," - A dictionary of the current row (this is reflects the schema of the data source)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Context"})," - A dictionary of the context. See ",(0,s.jsx)(n.a,{href:"/docs/how-it-works/features/context",children:"Context"})," for\nmore details."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"It must use a return type annotation to indicate the primitive type of the feature value."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keys"})," (",(0,s.jsx)(n.code,{children:"str or List[str]"}),"): a list of indexing keys, indicated the owner of the feature value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," (",(0,s.jsx)(n.code,{children:"str"}),"): the name of the feature. If not provided, the function name will be used."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data_source"})," (",(0,s.jsx)(n.code,{children:"str or DataSource object"}),"): the (fully qualified) name of the DataSource or a reference to the DataSource object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sourceless_markers_df"})," (",(0,s.jsx)(n.code,{children:"DataFrame"}),"): a DataFrame with the timestamp and keys markers for training sourceless features. It\na timestamp column, and a column for each key."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"function"}),": It returns a wrapped function with a few additional methods/properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"raptor_spec"})," - The Raptor specification of the feature.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"replay()"})," - A function that can be used to replay the feature calculation using the training sata of the source."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"manifest(to_file=False)"})," - A function that returns the manifest of the feature."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"export(with_dependent_source=True)"})," - A function that exports the feature to ",(0,s.jsx)(n.code,{children:"out"})," directory."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@feature(keys='account_id', data_source=Deal)\n@freshness(max_age='1h', max_stale='2h')\ndef last_amount(this_row: Deal, ctx: Context) -> float:\n    return this_row['amount']\n"})}),"\n",(0,s.jsx)(n.h4,{id:"model",children:"model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def model(keys: Union[str, List[str]],\n          input_features: Union[str, List[str], Callable, List[Callable]],\n          input_labels: Union[str, List[str], Callable, List[Callable]],\n          model_framework: Union[ModelFramework, str],\n          model_server: Optional[Union[ModelServer, str]] = None,\n          key_feature: Optional[Union[str, Callable]] = None,\n          prediction_output_schema: Optional[TypedDict] = None,\n          name: Optional[str] = None)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Register a Model Definition within the LabSDK."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Function Signature"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:["This decorator should wrap a training function that returns a trained model.\nThe function signature of a model definition must accept ",(0,s.jsx)(n.code,{children:"TrainingContext"})," as an argument."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"keys"})," (",(0,s.jsx)(n.code,{children:"str or list of str"}),"): the keys of the model. The keys are required for fetching the features."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"input_features"})," (",(0,s.jsx)(n.code,{children:"str or list of str or callable or list of callable"}),"): the features that are used as input to the model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"input_labels"})," (",(0,s.jsx)(n.code,{children:"str or list of str or callable or list of callable"}),"): the labels that are used as input to the model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model_framework"})," (",(0,s.jsx)(n.code,{children:"ModelFramework or str"}),"): the model framework used to train the model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model_server"})," (",(0,s.jsx)(n.code,{children:"ModelServer or str"}),"): the model server used to serve the model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"key_feature"})," (",(0,s.jsx)(n.code,{children:"str or callable"}),"): the feature that is used for joining the features together."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prediction_output_schema"})," (",(0,s.jsx)(n.code,{children:"TypedDict"}),"): the schema of the prediction output."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"})," (",(0,s.jsx)(n.code,{children:"str"}),"): the name of the model. If not provided, the name will be the function name."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:["`function\n",(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@model(\n    keys=['customer_id'],\n    input_features=['total_spend+sum'],\n    input_labels=[amount],\n    model_framework='sklearn',\n    model_server='sagemaker-ack',\n)\n@freshness(max_age='1h', max_stale='100h')\ndef amount_prediction(ctx: TrainingContext):\n    from sklearn.linear_model import LinearRegression\n\n    df = ctx.features_and_labels()\n\n    trainer = LinearRegression()\n    trainer.fit(df[ctx.input_features], df[ctx.input_labels])\n\n    return trainer\n````: a wrapped function `train()` that runs your training function with the `TrainingContext` provided.\nIt also provides a few new methods/properties to the returned function:\n\n* `raptor_spec` - The Raptor spec of the model.\n* `train()` - The training function.\n* `features_and_labels()` - A function that returns a DataFrame of the features and labels.\n* `manifest(to_file=False)` - A function that returns the manifest of the model.\n* `export(with_dependent_features=True, with_dependent_sources=True)` - A function that exports the model to the `out` directory.\n* `keys` - the keys of the model.\n* `input_features` - the input features of the model.\n* `input_labels` - the input labels of the model.\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1523:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6504);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);