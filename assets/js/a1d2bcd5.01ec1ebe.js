"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9703],{84907:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(39953);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(r),d=a,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||l;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6065:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(1943),a=(r(39953),r(84907));const l={sidebar_label:"program",title:"program"},o=void 0,i={unversionedId:"reference/labsdk/program",id:"reference/labsdk/program",title:"program",description:"Context Objects",source:"@site/docs/reference/labsdk/program.md",sourceDirName:"reference/labsdk",slug:"/reference/labsdk/program",permalink:"/reference/labsdk/program",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/labsdk/program.md",tags:[],version:"current",frontMatter:{sidebar_label:"program",title:"program"},sidebar:"reference",previous:{title:"local_state",permalink:"/reference/labsdk/local_state"},next:{title:"common",permalink:"/reference/labsdk/types/common"}},p={},s=[{value:"Context Objects",id:"context-objects",level:2},{value:"get_feature",id:"get_feature",level:4},{value:"get_prediction",id:"get_prediction",level:4}],u={toc:s};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"context-objects"},"Context Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Context()\n")),(0,a.kt)("p",null,"Context of the feature request."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fqn")," (",(0,a.kt)("inlineCode",{parentName:"li"},"str"),"): Fully Qualified Name of the feature."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"keys")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Dict[str,str]"),"): the keys(identifiers) we request the value for."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timestamp")," (",(0,a.kt)("inlineCode",{parentName:"li"},"datetime"),"): the timestamp when the request for this feature was made by the user")),(0,a.kt)("h4",{id:"get_feature"},"get","_","feature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_feature(selector: str,\n                keys: Dict[str, str] = None) -> [primitive, datetime]\n")),(0,a.kt)("p",null,"Get feature value for a dependant feature."),(0,a.kt)("p",null,"Behind the scenes, the LabSDK will return you the value for the requested Feature Selector and keys\n",(0,a.kt)("strong",{parentName:"p"},"at the appropriate")," timestamp of the request. That means that we'll use the request's timestamp when replying\nfeatures. Cool right? \ud83d\ude0e"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"selector")," (",(0,a.kt)("inlineCode",{parentName:"li"},"str"),"): Feature Selector of the feature, including aggregation function if exists."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"keys")," (",(0,a.kt)("inlineCode",{parentName:"li"},"str"),"): the keys(identifiers) we request the value for.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"a tuple of (value, timestamp)"),(0,a.kt)("h4",{id:"get_prediction"},"get","_","prediction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_prediction(selector: str,\n                   keys: Dict[str, str] = None) -> Tuple[any, datetime]\n")),(0,a.kt)("p",null,"Get the predicted value from a model."),(0,a.kt)("p",null,"Behind the scenes, the LabSDK will call the model server and deliver back the prediction from the requested\nModel's FQN and keys ",(0,a.kt)("strong",{parentName:"p"},"at the appropriate")," timestamp of the request. That means that we'll use the\nrequest's timestamp when replying features. Cool right? \ud83d\ude0e"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"selector")," (",(0,a.kt)("inlineCode",{parentName:"li"},"str"),"): Fully Qualified Name of the model."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"keys")," (",(0,a.kt)("inlineCode",{parentName:"li"},"str"),"): the keys(identifiers) we request the value for. By default, the keys of the current context are\nused.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"a tuple of (prediction, timestamp)"))}c.isMDXComponent=!0}}]);