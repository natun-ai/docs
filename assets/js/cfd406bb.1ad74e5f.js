"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9398],{7235:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(4964),o=t(1523);const i={title:"Aggregations"},a="Rolling window aggregations",s={id:"docs/concepts/aggregations",title:"Aggregations",description:"Aggregations are probably the most complex challenge while building a production-grade feature,",source:"@site/docs/docs/concepts/3-aggregations.md",sourceDirName:"docs/concepts",slug:"/docs/concepts/aggregations",permalink:"/docs/concepts/aggregations",draft:!1,unlisted:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/concepts/3-aggregations.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Aggregations"},sidebar:"docs",previous:{title:"Data Sources",permalink:"/docs/concepts/datasources"},next:{title:"Sourceless features",permalink:"/docs/concepts/sourceless"}},c={},l=[];function g(e){const n={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Aggregations are probably the most complex challenge while building a production-grade feature,\nthey require a ",(0,r.jsx)(n.a,{href:"/docs/how-it-works/features/aggregations",children:"special mechanism"})," to handle the data in\nproduction, but are relatively easy to implement in development."]}),"\n",(0,r.jsx)(n.p,{children:"Fortunately, it's relatively easy to build aggregations in Raptor."}),"\n",(0,r.jsx)(n.h1,{id:"rolling-window-aggregations",children:"Rolling window aggregations"}),"\n",(0,r.jsx)(n.p,{children:"Aggregations are usually being calculated on a rolling window, I.e. The amount of clicks over the last hour."}),"\n",(0,r.jsxs)(n.p,{children:["We can achieve that by using the ",(0,r.jsx)(n.a,{href:"/reference/labsdk/decorators#aggregation",children:(0,r.jsx)(n.code,{children:"@aggregation"})})," decorator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"@feature(keys='user_id', data_source=Click)\n@aggregation(\n    function=AggregationFunction.Count,\n    over='10h',\n    granularity='1m'\n)\ndef clicks(this_row: Click, ctx: Context) -> int:\n    \"\"\"clicks over 10 hours\"\"\"\n    return 1\n"})}),"\n",(0,r.jsx)(n.p,{children:"Pretty simple right? let's go through what we did here line by line:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["We registered the feature with the ",(0,r.jsx)(n.a,{href:"/reference/labsdk/decorators#feature",children:(0,r.jsx)(n.code,{children:"@feature"})})," decorator."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["We defined the aggregation function with the ",(0,r.jsx)(n.a,{href:"/reference/labsdk/decorators#aggregation",children:(0,r.jsx)(n.code,{children:"@aggregation"})})," decorator."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["We set the aggregation function to be ",(0,r.jsx)(n.code,{children:"count"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"We set the rolling window to be 10 hours."}),"\n",(0,r.jsx)(n.li,{children:"We set the granularity to be 1 minute."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"We defined the feature function, which is a simple function that returns 1.\nThis is because we're counting the number of clicks, so we don't need to do any calculations."}),"\n",(0,r.jsx)(n.p,{children:"This will actually count the number of clicks over the last 10 hours, and will return the number of clicks."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"aggregation-functions",children:"Aggregation functions"}),"\n",(0,r.jsx)(n.p,{children:"Now that we know how to build aggregations, let's go ahead and build a feature that have multiple aggregation functions."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:"@feature(keys='account_id', data_source=Deal)\n@aggregation(\n    function=[AggregationFunction.Sum, AggregationFunction.Avg, AggregationFunction.Max, AggregationFunction.Min],\n    over='10h',\n    granularity='1m'\n)\ndef deals_10h(this_row: Deal, ctx: Context) -> float:\n    \"\"\"sum/avg/min/max of deal amount over 10 hours\"\"\"\n    return this_row['amount']\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this example, we're building a feature that is calculating the sum, average, maximum and minimum of the deal amount."}),"\n",(0,r.jsx)(n.p,{children:"This is actually generating for us multiple features, one for each aggregation function.\nWe can access them by specifying the aggregation function in the Feature Selector:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"showLineNumbers",children:'ctx.feature_get("default.deals_10h+sum")\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},1523:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6504);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);