"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4288],{84907:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(39953);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(r),h=a,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||o;return r?n.createElement(m,s(s({ref:t},d),{},{components:r})):n.createElement(m,s({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},10696:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=r(1943),a=(r(39953),r(84907));const o={},s="Freshness Guarantees",i={unversionedId:"docs/how-it-works/freshness",id:"docs/how-it-works/freshness",title:"Freshness Guarantees",description:"Production systems expect strict service guarantees that ensures the quality of the service for the end-user.",source:"@site/docs/docs/how-it-works/freshness.md",sourceDirName:"docs/how-it-works",slug:"/docs/how-it-works/freshness",permalink:"/docs/how-it-works/freshness",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/how-it-works/freshness.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Feature Values",permalink:"/docs/how-it-works/features/feature-values"},next:{title:"Historical Data and Retraining",permalink:"/docs/how-it-works/historical-data-and-backfill"}},l={},u=[{value:"Freshness definition",id:"freshness-definition",level:2},{value:"How does it work?",id:"how-does-it-work",level:2}],d={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"freshness-guarantees"},"Freshness Guarantees"),(0,a.kt)("p",null,"Production systems expect strict ",(0,a.kt)("strong",{parentName:"p"},"service guarantees")," that ensures the quality of the service for the end-user."),(0,a.kt)("p",null,"To implement that, you should define a desired ",(0,a.kt)("strong",{parentName:"p"},"Service Layer Agreement")," for your features, and Raptor will build a\ncustomized implementation for you features that meet these guarantees."),(0,a.kt)("p",null,'Another way to look at it is to think of the Freshness Guarantees as a set of rules that defines what is the "current\nstate" of the world.'),(0,a.kt)("h2",{id:"freshness-definition"},"Freshness definition"),(0,a.kt)("p",null,"When creating the Feature or a Model Definition, you specify three important values: ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"max_age"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"max_stale"),",\nand ",(0,a.kt)("inlineCode",{parentName:"strong"},"timeout"),".")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"/assets/freshness.png",alt:"Freshness Guarantees illustration"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"max_age"))," - Is the age of a data that is considered fresh. When the data is fresh, we don't need to compute it\nagain."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"max_stale"))," - If we don't have a fresh value, we might use a stale value as a fallback, as long as it's not too\nstale(as defined in the ",(0,a.kt)("inlineCode",{parentName:"li"},"max_stale"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"timeout"))," - Is the maximum time that we can wait for the data to be computed. If the timeout is exceeded, we\nwill either return a stale data(if we have it), or through an error.")),(0,a.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,a.kt)("p",null,"Under the hood, Raptor configures the necessary data-sources, storage, and compute resources to ensure that your\nfeatures meet the Freshness guarantees."),(0,a.kt)("p",null,"When a value is requested, Raptor:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Check if we have a ",(0,a.kt)("strong",{parentName:"li"},"fresh")," value for the feature. If we do, return it."),(0,a.kt)("li",{parentName:"ol"},"If the data we have is not ",(0,a.kt)("em",{parentName:"li"},"fresh"),", but it's not past the ",(0,a.kt)("em",{parentName:"li"},"max_stale")," yet, we will compute the data again, and return\nit.",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"If the data is computed ",(0,a.kt)("strong",{parentName:"li"},"before the ",(0,a.kt)("inlineCode",{parentName:"strong"},"timeout")),", return it."),(0,a.kt)("li",{parentName:"ol"},"If the data is computed ",(0,a.kt)("strong",{parentName:"li"},"after the ",(0,a.kt)("inlineCode",{parentName:"strong"},"timeout")),", return the stale data, and compute the data in the background\nfor future usage."))),(0,a.kt)("li",{parentName:"ol"},"If we don't have a stale data, and the timeout is exceeded, return an error."),(0,a.kt)("li",{parentName:"ol"},"Stale data past the ",(0,a.kt)("inlineCode",{parentName:"li"},"max_stale")," age is never returned. Instead, the Historian is recording it for future usage, and\nwe delete it from the State.")))}c.isMDXComponent=!0}}]);