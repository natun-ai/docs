"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5439],{4907:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(9953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),c=r,f=p["".concat(s,".").concat(c)]||p[c]||m[c]||i;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6919:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(1943),r=(n(9953),n(4907));const i={},l="Models",o={unversionedId:"guides/labsdk/models",id:"guides/labsdk/models",title:"Models",description:"Building production-ready models with Raptor is easy. You can use any model framework you want, and Raptor will take",source:"@site/docs/guides/labsdk/6-models.md",sourceDirName:"guides/labsdk",slug:"/guides/labsdk/models",permalink:"/docs/guides/labsdk/models",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/guides/labsdk/6-models.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"guides",previous:{title:"Derived feature (or How to do Joins?)",permalink:"/docs/guides/labsdk/derived"},next:{title:"Installing Raptor on your Kubernetes cluster",permalink:"/docs/guides/install"}},s={},u=[{value:"Getting the training data",id:"getting-the-training-data",level:2},{value:"Training the model locally before exporting it",id:"training-the-model-locally-before-exporting-it",level:2},{value:"Key Feature",id:"key-feature",level:2},{value:"Setting the key feature",id:"setting-the-key-feature",level:3}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"models"},"Models"),(0,r.kt)("p",null,"Building production-ready models with Raptor is easy. You can use any model framework you want, and Raptor will take\ncare of the rest."),(0,r.kt)("p",null,"To do that, you'll need to define the training function, and specify it's input features, label(also a feature), and\nthe model framework you're using."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"@model(\n  keys=['customer_id'],\n  input_features=['total_spend+sum'],\n  input_labels=[amount],\n  model_framework='sklearn',\n  model_server='sagemaker-ack',\n)\n@freshness(max_age='1h', max_stale='100h')\ndef amount_prediction(ctx: TrainingContext):\n  from sklearn.linear_model import LinearRegression\n\n  df = ctx.features_and_labels()\n\n  trainer = LinearRegression()\n  trainer.fit(df[ctx.input_features], df[ctx.input_labels])\n\n  return trainer\n")),(0,r.kt)("admonition",{title:"When should we use Feature Selectors?",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You might notice that we're using a feature selector in the ",(0,r.kt)("inlineCode",{parentName:"p"},"input_features")," field. Feature Selectors are a way to reference a specific representation of a feature."),(0,r.kt)("p",{parentName:"admonition"},"When we want to add a feature that have an aggregation, we must use a selector to reference it: ",(0,r.kt)("inlineCode",{parentName:"p"},"<name>+<aggrFn>"),"."),(0,r.kt)("p",{parentName:"admonition"},"For more information, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/how-does-raptor-work/selectors"},"Feature Selectors"),".")),(0,r.kt)("h2",{id:"getting-the-training-data"},"Getting the training data"),(0,r.kt)("p",null,"To get the training data, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"features_and_labels()")," function of the training context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"df = ctx.features_and_labels()\n")),(0,r.kt)("p",null,"This will return a pandas dataframe that contains the features and labels."),(0,r.kt)("p",null,"To get the features, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"input_features")," field of the training context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"df[ctx.input_features]\n")),(0,r.kt)("p",null,"Or, we can split the data to training set and test set:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n  df[ctx.input_features],\n  df[ctx.input_labels],\n  test_size=0.2,\n  random_state=42,\n)\n")),(0,r.kt)("h2",{id:"training-the-model-locally-before-exporting-it"},"Training the model locally before exporting it"),(0,r.kt)("p",null,"Sometimes, we want to train the model locally before exporting it. This is useful when we want to iterate and experiment\nwith the model."),(0,r.kt)("p",null,"To do that, we can use the new ",(0,r.kt)("inlineCode",{parentName:"p"},"train()")," method of training function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"mymodel = amount_prediction()\n\n# %%\n\ndata = amount_prediction.features_and_labels()\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n\nx = data[amount_prediction.input_features]\ny = data[amount_prediction.input_labels]\n_, x_test, _, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=1234)\n\ny_pred = mymodel.predict(x_test)\nres = classification_report(y_pred, y_test.values.ravel())\n")),(0,r.kt)("h2",{id:"key-feature"},"Key Feature"),(0,r.kt)("p",null,"The key feature is the feature that we used to join the rest of the features with, i.e.:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"timestamp"),(0,r.kt)("th",{parentName:"tr",align:null},"entity_id"),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"feature_1")),(0,r.kt)("th",{parentName:"tr",align:null},"feature_2"),(0,r.kt)("th",{parentName:"tr",align:null},"feature_3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10:00"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10:01"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10:02"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"...")))),(0,r.kt)("p",null,"As you see in the table below, we are using the key feature (",(0,r.kt)("inlineCode",{parentName:"p"},"feature_1"),") timestamps to join the rest of the features -\nthat means that we are getting the feature value of the rest of the features at the same time as the key feature."),(0,r.kt)("h3",{id:"setting-the-key-feature"},"Setting the key feature"),(0,r.kt)("p",null,"The key feature is defined as the ",(0,r.kt)("strong",{parentName:"p"},"first")," feature in the feature set. Alternatively, you can set the key feature using\nthe options of the decorator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"@model(\n  key_feature='feature_1',\n  ...\n)\n")))}p.isMDXComponent=!0}}]);