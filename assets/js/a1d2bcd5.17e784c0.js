"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6883],{2130:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var n=r(4964),s=r(1523);const i={sidebar_label:"program",title:"program"},l=void 0,c={id:"reference/labsdk/program",title:"program",description:"Context Objects",source:"@site/docs/reference/labsdk/program.md",sourceDirName:"reference/labsdk",slug:"/reference/labsdk/program",permalink:"/reference/labsdk/program",draft:!1,unlisted:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/labsdk/program.md",tags:[],version:"current",frontMatter:{sidebar_label:"program",title:"program"},sidebar:"reference",previous:{title:"local_state",permalink:"/reference/labsdk/local_state"},next:{title:"common",permalink:"/reference/labsdk/types/common"}},o={},d=[{value:"Context Objects",id:"context-objects",level:2},{value:"get_feature",id:"get_feature",level:4},{value:"get_prediction",id:"get_prediction",level:4}];function a(e){const t={code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"context-objects",children:"Context Objects"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class Context()\n"})}),"\n",(0,n.jsx)(t.p,{children:"Context of the feature request."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Arguments"}),":"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"fqn"})," (",(0,n.jsx)(t.code,{children:"str"}),"): Fully Qualified Name of the feature."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"keys"})," (",(0,n.jsx)(t.code,{children:"Dict[str,str]"}),"): the keys(identifiers) we request the value for."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"timestamp"})," (",(0,n.jsx)(t.code,{children:"datetime"}),"): the timestamp when the request for this feature was made by the user"]}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"get_feature",children:"get_feature"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"def get_feature(selector: str,\n                keys: Dict[str, str] = None) -> [primitive, datetime]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Get feature value for a dependant feature."}),"\n",(0,n.jsxs)(t.p,{children:["Behind the scenes, the LabSDK will return you the value for the requested Feature Selector and keys\n",(0,n.jsx)(t.strong,{children:"at the appropriate"})," timestamp of the request. That means that we'll use the request's timestamp when replying\nfeatures. Cool right? \ud83d\ude0e"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Arguments"}),":"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"selector"})," (",(0,n.jsx)(t.code,{children:"str"}),"): Feature Selector of the feature, including aggregation function if exists."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"keys"})," (",(0,n.jsx)(t.code,{children:"str"}),"): the keys(identifiers) we request the value for."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Returns"}),":"]}),"\n",(0,n.jsx)(t.p,{children:"a tuple of (value, timestamp)"}),"\n",(0,n.jsx)(t.h4,{id:"get_prediction",children:"get_prediction"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"def get_prediction(selector: str,\n                   keys: Dict[str, str] = None) -> Tuple[any, datetime]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Get the predicted value from a model."}),"\n",(0,n.jsxs)(t.p,{children:["Behind the scenes, the LabSDK will call the model server and deliver back the prediction from the requested\nModel's FQN and keys ",(0,n.jsx)(t.strong,{children:"at the appropriate"})," timestamp of the request. That means that we'll use the\nrequest's timestamp when replying features. Cool right? \ud83d\ude0e"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Arguments"}),":"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"selector"})," (",(0,n.jsx)(t.code,{children:"str"}),"): Fully Qualified Name of the model."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"keys"})," (",(0,n.jsx)(t.code,{children:"str"}),"): the keys(identifiers) we request the value for. By default, the keys of the current context are\nused."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Returns"}),":"]}),"\n",(0,n.jsx)(t.p,{children:"a tuple of (prediction, timestamp)"})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},1523:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>c});var n=r(6504);const s={},i=n.createContext(s);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);