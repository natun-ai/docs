"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1184],{9243:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(4964),o=n(1523);const s={description:"Build your first production-ready model in less than 5 minutes",jupyter:{colab:{include_colab_link:!0,name:"Getting Started with Raptor"},kernelspec:{display_name:"Python 3",name:"python3"},language_info:{name:"python"},nbformat:4,nbformat_minor:0},sidebar_position:1,title:"Getting Started"},r=void 0,l={id:"docs/getting-started-ipynb",title:"Getting Started",description:"Build your first production-ready model in less than 5 minutes",source:"@site/docs/docs/getting-started-ipynb.md",sourceDirName:"docs",slug:"/docs/getting-started-ipynb",permalink:"/docs/getting-started-ipynb",draft:!1,unlisted:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/getting-started-ipynb.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Build your first production-ready model in less than 5 minutes",jupyter:{colab:{include_colab_link:!0,name:"Getting Started with Raptor"},kernelspec:{display_name:"Python 3",name:"python3"},language_info:{name:"python"},nbformat:4,nbformat_minor:0},sidebar_position:1,title:"Getting Started"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/"},next:{title:"Core Concepts",permalink:"/docs/concepts/"}},i={},d=[{value:"\ud83e\uddd0 Getting started",id:"-getting-started",level:2},{value:"\u26a1\ufe0f Installing the SDK",id:"\ufe0f-installing-the-sdk",level:2},{value:"\u270d\ufe0f Writing our first features",id:"\ufe0f-writing-our-first-features",level:2},{value:"\ud83d\ude0e <em>Cool tip</em>",id:"-cool-tip",level:2},{value:"\ud83e\udde0 Training our model",id:"-training-our-model",level:2},{value:"\u2601\ufe0f Deployment",id:"\ufe0f-deployment",level:2},{value:"\ud83e\ude84 Ta-dam!",id:"-ta-dam",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{class:"cell markdown",colab_type:"text",id:"view-in-github",children:(0,a.jsx)("a",{href:"https://colab.research.google.com/github/raptor-ml/docs/blob/master/docs/docs/getting-started.ipynb",target:"_parent",children:(0,a.jsx)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})})}),"\n",(0,a.jsx)("div",{class:"cell markdown",docusaurus_hide:"true",id:"BK8SRO9PQ5VS"}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"olN5NKbsQlKB",children:[(0,a.jsx)(t.p,{children:"Using the LabSDK, data-scientists can build models(that can run on\nproduction) directly from the notebook."}),(0,a.jsxs)(t.p,{children:['When you\'re done, you can "export" your work, like any other production\nasset. This way, you can ',(0,a.jsx)(t.strong,{children:"focus on your model"}),", while Raptor is taking\ncare of the production concerns."]})]}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"W8E2-YjxnEVt",children:[(0,a.jsx)(t.h2,{id:"-getting-started",children:"\ud83e\uddd0 Getting started"}),(0,a.jsx)(t.p,{children:"In this quickstart tutorial, we'll build a model that predicts the\nprobability of closing a deal."}),(0,a.jsx)(t.p,{children:"Our CRM allow us to track every email communication, and the history of\nprevious deals for each customer. We'll use this data sources to predict\nwhether the customer is ready for closure or not."}),(0,a.jsx)(t.p,{children:"To do that, we're going to build a few features from the data:"}),(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"emails_10h"})," - the amount of email exchanges over the last 10 hours"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"question_marks_10h+avg"})," - the average amount of question marks in\nthe subject over the last 10 hours"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"deals_10h+sum"})," - the sum of the deals of the last 10 hours"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"emails_deals"})," - the rate between the emails in the last 10 hours\n(",(0,a.jsx)(t.code,{children:"emails_10h"}),") and the avarage of the deals in the last 10 hours\n(",(0,a.jsx)(t.code,{children:"deals_10h[avg]"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"diff_with_previous_amount"})," - the delta between the last amount and\nthe one before"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"last_amount"})," - our label"]}),"\n"]})]}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"ZwsP6pk7ibxZ",children:[(0,a.jsx)(t.h2,{id:"\ufe0f-installing-the-sdk",children:"\u26a1\ufe0f Installing the SDK"}),(0,a.jsx)(t.p,{children:"Yalla, let's go! First, we install the LabSDK and import it."})]}),"\n",(0,a.jsxs)("div",{class:"cell code",execution_count:"1",colab:'{"base_uri":"https://localhost:8080/"}',id:"a5eW89kWTdL5",outputId:"f9cd22e0-8adf-46d6-e550-4e85fd5352b0",children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"!pip install raptor-labsdk pyarrow -U --quiet\nfrom raptor import *\nimport pandas as pd\nfrom datetime import datetime\nfrom typing_extensions import TypedDict\n"})}),(0,a.jsx)("div",{class:"output stream stdout",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-console",children:"\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 51.1/51.1 kB 1.3 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 40.8/40.8 MB 15.0 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 985.1/985.1 kB 17.2 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.5/57.5 kB 2.2 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 200.6/200.6 kB 8.7 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 135.3/135.3 kB 6.5 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.3/57.3 kB 2.0 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100.0/100.0 kB 7.2 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 53.1/53.1 kB 3.7 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 68.9/68.9 kB 3.3 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 60.8/60.8 kB 2.8 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.3/1.3 MB 19.1 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 45.6/45.6 kB 2.8 MB/s eta 0:00:00\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.3/58.3 kB 1.5 MB/s eta 0:00:00\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nibis-framework 8.0.0 requires pyarrow<16,>=2, but you have pyarrow 16.0.0 which is incompatible.\n"})})})]}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"p88hB-owwk3-",children:[(0,a.jsx)(t.h2,{id:"\ufe0f-writing-our-first-features",children:"\u270d\ufe0f Writing our first features"}),(0,a.jsx)(t.p,{children:"Our first feature is calculating how many emails an account got over the\nlast 10 hours."}),(0,a.jsx)(t.p,{children:"To do that, we first define our data-sources, then we can start\ntransforming our data."})]}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"2",id:"25sRcwoMwtR_",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@data_source(\n    training_data=pd.read_parquet('https://gist.github.com/AlmogBaku/8be77c2236836177b8e54fa8217411f2/raw/emails.parquet'),  # This is the data as looks in production\n    keys=['id', 'account_id'],\n    timestamp='event_at',\n    production_config=StreamingConfig(kind='kafka'), # This optional, and will create the production data-source configuration for DevOps\n)\nclass Email(TypedDict('Email', {'from': str})):\n    event_at: datetime\n    account_id: str\n    subject: str\n    to: str\n"})})}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"3",id:"aUqlADgYbcmr",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@feature(keys='account_id', data_source=Email)\n@aggregation(function=AggregationFunction.Count, over='10h', granularity='1h')\ndef emails_10h(this_row: Email, ctx: Context) -> int:\n    \"\"\"email over 10 hours\"\"\"\n    return 1\n"})})}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"4",id:"xcHrGi2Nbmh4",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@feature(keys='account_id', data_source=Email)\n@aggregation(function=AggregationFunction.Avg, over='10h', granularity='1h')\ndef question_marks_10h(this_row: Email, ctx: Context) -> int:\n    \"\"\"question marks over 10 hours\"\"\"\n    return this_row['subject'].count('?')\n"})})}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"1DiPXWqULKB7",children:[(0,a.jsx)(t.hr,{}),(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.h2,{id:"-cool-tip",children:["\ud83d\ude0e ",(0,a.jsx)(t.em,{children:"Cool tip"})]}),"\n",(0,a.jsxs)(t.p,{children:["You can use the ",(0,a.jsx)(t.code,{children:"@runtime"})," decorator to specify packages you want to\ninstall and use."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://raptor.ml/",children:"Learn more on the docs \xbb"})}),"\n"]})]}),"\n",(0,a.jsx)("div",{class:"cell markdown",id:"PC6AOb9RxMau",children:(0,a.jsx)(t.p,{children:"Let's create another feature that calculates various aggregations\nagainst the deal amount."})}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"5",id:"L0oPJvDgdKSY",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@data_source(\n    training_data=pd.read_csv('https://gist.githubusercontent.com/AlmogBaku/8be77c2236836177b8e54fa8217411f2/raw/deals.csv'),\n    keys=['id', 'account_id'],\n    timestamp='event_at',\n)\nclass Deal(TypedDict):\n    id: int\n    event_at: datetime\n    account_id: str\n    amount: float\n"})})}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"6",id:"1xuZOPyayKHT",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@feature(keys='account_id', data_source=Deal)\n@aggregation(\n    function=[AggregationFunction.Sum, AggregationFunction.Avg, AggregationFunction.Max, AggregationFunction.Min],\n    over='10h',\n    granularity='1m'\n)\ndef deals_10h(this_row: Deal, ctx: Context) -> float:\n    \"\"\"sum/avg/min/max of deal amount over 10 hours\"\"\"\n    return this_row['amount']\n"})})}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"Q1IADRr1yiIR",children:[(0,a.jsxs)(t.p,{children:["Now we can create a ",(0,a.jsx)(t.em,{children:"derived feature"})," that defines the rate between\nthese two features."]}),(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"\ud83d\udca1Hint:"})," Notice that when querying a feature with aggregation, we\nneed to specify the feature with the aggregation feature we want using\nthe feature selector."]})]}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"7",id:"WOmMn2bxynMp",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@feature(keys='account_id', sourceless_markers_df=Deal.raptor_spec.local_df)\n@freshness(max_age='-1', max_stale='-1')\ndef emails_deals(_, ctx: Context) -> float:\n    \"\"\"emails/deal[avg] rate over 10 hours\"\"\"\n    e, _ = ctx.get_feature('emails_10h+count')\n    d, _ = ctx.get_feature('deals_10h+avg')\n    if e is None or d is None:\n        return None\n    return e / d\n"})})}),"\n",(0,a.jsx)("div",{class:"cell markdown",id:"bxY7Vod0dht9",children:(0,a.jsxs)(t.p,{children:["Finally, we'll create ",(0,a.jsx)(t.code,{children:"last_amount"})," which will reserve one previous\nvalue. We'll use this feature as our label, and to calculte the delta\nbetween the previous amount."]})}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"8",id:"7XEUpCv_d1iS",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@feature(keys='account_id', data_source=Deal)\n@freshness(max_age='1h', max_stale='2h')\n@keep_previous(versions=1, over='1h')\ndef last_amount(this_row: Deal, ctx: Context) -> float:\n    return this_row['amount']\n"})})}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"9",id:"Dp1PzC9Xd27X",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@feature(keys='account_id', sourceless_markers_df=Deal.raptor_spec.local_df)\n@freshness(max_age='1h', max_stale='2h')\ndef diff_with_previous_amount(this_row: Deal, ctx: Context) -> float:\n    lv, ts = ctx.get_feature('last_amount@-1')\n    if lv is None:\n        return 0\n    return this_row['amount'] - lv\n"})})}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"Lpfe-PHWqAVY",children:[(0,a.jsx)(t.h2,{id:"-training-our-model",children:"\ud83e\udde0 Training our model"}),(0,a.jsx)(t.p,{children:"After we defined our features, and wrote our feature engineering code,\nwe can start and train our model."})]}),"\n",(0,a.jsx)("div",{class:"cell code",execution_count:"10",id:"tNeaKZGMErJ4",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"@model(\n    keys=['account_id'],\n    input_features=[\n        'emails_10h+count', 'deals_10h+sum', emails_deals, diff_with_previous_amount, 'question_marks_10h+avg',\n    ],\n    input_labels=[last_amount],\n    model_framework='sklearn',\n    model_server='sagemaker-ack',\n)\n@freshness(max_age='1h', max_stale='100h')\ndef deal_prediction(ctx: TrainingContext) -> float:\n    from xgboost import XGBClassifier\n    from sklearn.model_selection import train_test_split\n\n    df = ctx.features_and_labels()\n    X = df[ctx.input_features]\n    y = df[ctx.input_labels]\n\n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n    # Transform y_train to a 1D array\n    y_train = y_train.values.ravel()\n\n    # Initialize an XGBoost model\n    xgb_model = XGBClassifier()\n\n    # Fit the model to the training data\n    from sklearn.preprocessing import LabelEncoder\n    le = LabelEncoder()\n\n    # Initialize the LabelEncoder\n    le = LabelEncoder()\n    y_train_encoded = le.fit_transform(y_train)\n\n    # Fit the model with the encoded labels\n    xgb_model.fit(X_train, y_train_encoded)\n\n    return xgb_model\n\ndeal_prediction.export()\n"})})}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"GO99n3tCpC2y",children:[(0,a.jsx)(t.h2,{id:"\ufe0f-deployment",children:"\u2601\ufe0f Deployment"}),(0,a.jsx)(t.p,{children:"Your'e officially done! \ud83c\udf89"}),(0,a.jsxs)(t.p,{children:["To deploy your model, instruct your DevOps team to deploy it using the\nexisting CI/CD using the generated ",(0,a.jsx)(t.code,{children:"Makefile"})," in the ",(0,a.jsx)(t.code,{children:"out"})," dir (or\nmanually using ",(0,a.jsx)(t.code,{children:"kubectl"}),")."]})]}),"\n",(0,a.jsxs)("div",{class:"cell code",execution_count:"11",colab:'{"base_uri":"https://localhost:8080/"}',id:"8ESVUlESq3QC",outputId:"667c80f4-391f-4f87-8784-841136e02062",children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"!make -C out/\n"})}),(0,a.jsx)("div",{class:"output stream stdout",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-console",children:"make: Entering directory '/content/out'\nmake: aws: No such file or directory\nmake: aws: No such file or directory\n                    \u2588\u2580\n                  \u2588\u2580  \u2588\u2580\n\u2584               \u2588\u2588\u2580 \u2584\u2588\u2580  \u2584\n \u2588\u2584\u2584           \u2588\u2588\u2580 \u2584\u2588\u2580 \u2584\u2588\u2580\n   \u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588 \u2584\u2584\u2588\u2580\n    \u2588\u2584        \u2588\u2588\u2588 \u2588\u2580                                 \u2584\n    \u2588\u2588\u2588      \u2588\u2588\u2588 \u2580                                \u2582\u2584\u2588\u2588\n    \u2588\u2588\u2588     \u2588\u2588\u2588\u2588     \u2584\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2588   \u2588\u2588 \u2584\u2588\u2580\u2580\u2580\u2580\u2588\u2584    \u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580   \u2584\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584   \u2588 \u2584\u2588\u2580\u2580\u2580\u2580\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e   \u2584\u2588\u2588\u2580     \u2580\u2588\u2588   \u2588\u2588\u2580      \u2580\u2588\u2588\u2584   \u2588\u2588\u2588      \u2588\u2588\u2588       \u2588\u2588\u258c  \u2588\u2588\u2580\n    \u2588\u2588\u2588     \u2580\u2588\u2588\u2588   \u2588\u2588\u258c      \u2584\u2588\u2588   \u2588\u2588\u258c       \u2588\u2588\u2580   \u2588\u2588       \u2588\u2588        \u2588\u2588   \u2588\u2588\n    \u2588\u2588\u2588      \u2590\u2588\u2588\u2584  \u2580\u2588\u2588\u2584   \u2584\u2580\u2588\u2588\u2588   \u2588\u2588\u2588     \u2584\u2588\u2588\u2580    \u2588\u2588\u2588       \u2588\u2588\u2588     \u2588\u2588    \u2588\u258c\n    \u2588\u2588\u2588       \u2588\u2588\u2588\u2584   \u2580\u2580\u2588\u2588\u2580\u2580  \u2588\u2588   \u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580\u2580       \u2580\u2588\u2588\u2588\u2580       \u2580\u2588\u2588\u2588\u2588\u2580      \u2588\n                                  \u2588\u2588\u258c\n                                  \u2588\u2580\n\n\nUsage:\n  make <target>\n\nGeneral\n  help             Display this help.\n\nHelpers\n  show-envs        Show all environment variables that are available for configuring the generated YAML manifests\n\nAll\n  all              Build docker images for all models, push them to the docker repository and deploy all data-sources, features and models to Kubernetes\n  deploy           Deploy all data-sources, features and models to Kubernetes\n  all-ecr          Build docker images for all models, create ECR repos if not exists, push the images to the docker repository and deploy all data-sources, features and models to Kubernetes\n  deploy-ecr       Deploy all data-sources, features and models to Kubernetes\n\nData Sources\n  deploy-dsrcs     Deploy all data-sources to Kubernetes\n  deploy-dsrc-default-email  Deploy default.email to Kubernetes\n  deploy-dsrc-default-deal  Deploy default.deal to Kubernetes\n\nFeatures\n  deploy-features  Deploy all features to Kubernetes\n  deploy-feat-default-emails_10h  Deploy default.emails_10h to Kubernetes\n  deploy-feat-default-deals_10h  Deploy default.deals_10h to Kubernetes\n  deploy-feat-default-emails_deals  Deploy default.emails_deals to Kubernetes\n  deploy-feat-default-diff_with_previous_amount  Deploy default.diff_with_previous_amount to Kubernetes\n  deploy-feat-default-question_marks_10h  Deploy default.question_marks_10h to Kubernetes\n\nModels (All)\n  deploy-models    Deploy all models to Kubernetes\n  docker-build-models  Build docker images for all models\n  docker-push-models  Push docker images for all models\n  create-model-ecr-repos  Create ECR repositories for all models if they don't exist\n  docker-ecr-push-models  Push docker images for all models to ECR\n  deploy-ecr-models  Deploy all models to Kubernetes\n\nModels.PHONY: create-model-ecr-repo-default-deal_prediction\n  create-model-ecr-repo-default-deal_prediction  Create ECR repository for default.deal_prediction if it doesn't exist\n  docker-ecr-push-model-default-deal_prediction  Push docker image for default.deal_prediction to ECR\n  deploy-ecr-model-default-deal_prediction  Deploy default.deal_prediction to ECR.PHONY: docker-build-model-default-deal_prediction\n  docker-build-model-default-deal_prediction  Build docker image for default.deal_prediction\n  docker-push-model-default-deal_prediction  Push default.deal_prediction docker image\n  deploy-model-default-deal_prediction  Deploy default.deal_prediction to Kubernetes\nmake: Leaving directory '/content/out'\n"})})})]}),"\n",(0,a.jsxs)("div",{class:"cell markdown",id:"i8UXJLnwo9jC",children:[(0,a.jsx)(t.h2,{id:"-ta-dam",children:"\ud83e\ude84 Ta-dam!"}),(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"From now on"}),", you'll have features and models running in production\nand record the values for historical purposes (so you'll be able to\nretrain against the production data)."]}),(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://raptor.ml",children:(0,a.jsx)(t.strong,{children:"\ud83d\udd17 Learn more about what else you can do with Raptor at the official\ndocs"})})})]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1523:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var a=n(6504);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);