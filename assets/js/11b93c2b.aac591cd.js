"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1492],{4907:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(9953);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),f=i,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:i,o[1]=p;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2614:(e,t,n)=>{n.d(t,{Z:()=>g});var r=n(9953),i=n(4923),a=n(9622),o=n(7980),p=n(2755),l=n(261);const s="cardContainer__Cxy",c="cardTitle_gSLP",d="cardDescription_q2be";function u(e){let{href:t,children:n}=e;return r.createElement(a.Z,{href:t,className:(0,i.Z)("card padding--lg",s)},n)}function f(e){let{href:t,icon:n,title:a,description:o}=e;return r.createElement(u,{href:t},r.createElement("h2",{className:(0,i.Z)("text--truncate",c),title:a},n," ",a),o&&r.createElement("p",{className:(0,i.Z)("text--truncate",d),title:o},o))}function m(e){let{item:t}=e;const n=(0,o.Wl)(t);return n?r.createElement(f,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:(0,l.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function y(e){let{item:t}=e;const n=(0,p.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",i=(0,o.xz)(t.docId??void 0);return r.createElement(f,{href:t.href,icon:n,title:t.label,description:i?.description})}function h(e){let{item:t}=e;switch(t.type){case"link":return r.createElement(y,{item:t});case"category":return r.createElement(m,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function g(e){let{docId:t}=e;try{const e=(0,o.xz)(t??void 0),n=t.endsWith("/readme")?t.substring(0,t.length-"/readme".length):t;return r.createElement("p",null,r.createElement(h,{item:{type:"link",label:e.title,docId:t,href:"/docs/"+n}}))}catch(n){return r.createElement("div",{className:"card padding--lg cardContainer margin-bottom--sm"},r.createElement("b",null,"Error:")," ",n.message)}}},4230:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(1943),i=(n(9953),n(4907)),a=n(2614);const o={description:"The Python Expression(PyExp) Language is one of the most popular ways for you to define the builder's business logic."},p="Python Expression Language (PyExp)",l={unversionedId:"reference/pyexp/readme",id:"reference/pyexp/readme",title:"Python Expression Language (PyExp)",description:"The Python Expression(PyExp) Language is one of the most popular ways for you to define the builder's business logic.",source:"@site/docs/reference/pyexp/readme.mdx",sourceDirName:"reference/pyexp",slug:"/reference/pyexp/",permalink:"/docs/reference/pyexp/",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/pyexp/readme.mdx",tags:[],version:"current",frontMatter:{description:"The Python Expression(PyExp) Language is one of the most popular ways for you to define the builder's business logic."},sidebar:"reference",previous:{title:"featureset",permalink:"/docs/reference/labsdk/featureset"},next:{title:"Differences with Python",permalink:"/docs/reference/pyexp/differences-with-python"}},s={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Building features with PyExp",id:"building-features-with-pyexp",level:2},{value:"PyExp in production",id:"pyexp-in-production",level:2}],d={toc:c};function u(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"python-expression-language-pyexp"},"Python Expression Language (PyExp)"),(0,i.kt)("p",null,"Some feature builders allow us to express our feature's \"business logic\" via Raptor's Python Expression (PyExp) Language."),(0,i.kt)("admonition",{type:"success"},(0,i.kt)("p",{parentName:"admonition"},"Using PyExp, we can benefit from a deterministic, secure, and production-grade sandboxing of the code for your business logic.")),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"PyExp's syntax is inspired by Python3. This is valid syntax in PyExp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def fizz_buzz(n):\n  """Print Fizz Buzz numbers from 1 to n."""\n  for i in range(1, n + 1):\n    s = ""\n    if i % 3 == 0:\n      s += "Fizz"\n    if i % 5 == 0:\n      s += "Buzz"\n    print(s if s else i)\n\nfizz_buzz(20)\n')),(0,i.kt)("p",null,"PyExps semantics can differ from Python, but behavioral differences are rare, except for cases where PyExp raises an error. The following Python types are supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#none",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"None"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#booleans",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"bool"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#dictionaries",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"dict"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#functions",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"def"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#integers",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"int"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#lists",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"list"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/pyexp-language-definition/data-types#strings",title:"mention"},(0,i.kt)("inlineCode",{parentName:"a"},"string")))),(0,i.kt)("h2",{id:"building-features-with-pyexp"},"Building features with PyExp"),(0,i.kt)("p",null,"Implementing features with PyExp is easy. The only thing you need to implement is the function ",(0,i.kt)("inlineCode",{parentName:"p"},"handler"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def handler():\n  """Implement city feature"""\n  return "Tel-Aviv"\n')),(0,i.kt)("p",null,"For more information read:"),(0,i.kt)(a.Z,{docId:"reference/pyexp/handler-function",mdxType:"DocCard"}),(0,i.kt)("p",null,"In addition, you can use the ",(0,i.kt)("a",{parentName:"p",href:"pyexp/raptor-built-ins/"},"raptor built-ins"),' in order to depend on other features (and leverage that for "joins" like features), or do complex transformations.'),(0,i.kt)("p",null,"for more information read:"),(0,i.kt)(a.Z,{docId:"reference/pyexp/raptor-built-ins/readme",mdxType:"DocCard"}),(0,i.kt)("h2",{id:"pyexp-in-production"},"PyExp in production"),(0,i.kt)("p",null,"After a feature is being deployed to the cluster, Raptor will compile your PyExp code into bytecode. This process allows us to run your PyExp in a dedicated runtime sandbox and provide us with a production-ready code that is safe, reproducible, and deterministic."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"PEL compilation process",src:n(9746).Z,width:"496",height:"216"})),(0,i.kt)("p",null,"It's important to emphasize that the PyExp code is restricted of I/O operations in order to protect the code for production running. Only specific operations(which are implemented by the runtime) are allowed to do I/O."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"PyExp is based on a python dialect called Starlark. For a complete list of functions and types, check the ",(0,i.kt)("a",{parentName:"p",href:"pyexp/pyexp-language-definition/"},"Pyexp language definition"),".")))}u.isMDXComponent=!0},9746:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/docs-PyExp.drawio-5ed2a13659eb83d2cf1b674d5d6c5de3.png"}}]);