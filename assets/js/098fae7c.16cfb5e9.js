"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8595],{4907:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(9953);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,f=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9185:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(1943),a=(r(9953),r(4907));const i={},l="struct",s={unversionedId:"reference/pyexp/raptor-built-ins/struct",id:"reference/pyexp/raptor-built-ins/struct",title:"struct",description:"A generic object with fields.",source:"@site/docs/reference/pyexp/raptor-built-ins/struct.md",sourceDirName:"reference/pyexp/raptor-built-ins",slug:"/reference/pyexp/raptor-built-ins/struct",permalink:"/docs/reference/pyexp/raptor-built-ins/struct",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/reference/pyexp/raptor-built-ins/struct.md",tags:[],version:"current",frontMatter:{},sidebar:"reference",previous:{title:"re (regular expressions)",permalink:"/docs/reference/pyexp/raptor-built-ins/re-regular-expressions"},next:{title:"time",permalink:"/docs/reference/pyexp/raptor-built-ins/time"}},o={},c=[{value:"Members",id:"members",level:2},{value:"struct",id:"struct-1",level:3},{value:"Parameters",id:"parameters",level:4}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"struct"},"struct"),(0,a.kt)("p",null,"A generic object with fields."),(0,a.kt)("p",null,"Structs fields cannot be reassigned once the struct is created. Two structs are equal if they have the same fields and if corresponding field values are equal."),(0,a.kt)("h2",{id:"members"},"Members"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/pyexp/raptor-built-ins/struct#struct-1",title:"mention"},"#struct-1"))),(0,a.kt)("h3",{id:"struct-1"},"struct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"struct struct(**kwargs)\n")),(0,a.kt)("p",null,"Creates an immutable struct using the keyword arguments as attributes. It is used to group multiple values together. Example:\\"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'s = struct(x = 2, y = 3)\nreturn s.x + getattr(s, "y")  # returns 5\n')),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"kwargs")),(0,a.kt)("td",{parentName:"tr",align:null},"default = {}",(0,a.kt)("br",null),"Dictionary of arguments.")))))}p.isMDXComponent=!0}}]);