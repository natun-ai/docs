"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5076],{4907:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(9953);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),u=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=u(r),f=a,m=c["".concat(d,".").concat(f)]||c[f]||p[f]||o;return r?n.createElement(m,i(i({ref:t},l),{},{components:r})):n.createElement(m,i({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2245:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(1943),a=(r(9953),r(4907));const o={title:"Derived feature (or How to do Joins?)"},i=void 0,s={unversionedId:"guides/labsdk/derived",id:"guides/labsdk/derived",title:"Derived feature (or How to do Joins?)",description:'Raptor is introducing a new way to join between pieces of data - "dependencies".',source:"@site/docs/guides/labsdk/4-derived.md",sourceDirName:"guides/labsdk",slug:"/guides/labsdk/derived",permalink:"/docs/guides/labsdk/derived",draft:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/guides/labsdk/4-derived.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Derived feature (or How to do Joins?)"},sidebar:"guides",previous:{title:"Aggregations",permalink:"/docs/guides/labsdk/aggregations"},next:{title:"Models",permalink:"/docs/guides/labsdk/models"}},d={},u=[],l={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'Raptor is introducing a new way to join between pieces of data - "dependencies".'),(0,a.kt)("p",null,"As explained ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/labsdk/basics"},"earlier"),', we write features as functions and working in the context of a "row-level"\napproach.'),(0,a.kt)("p",null,'To implement a feature that "joins" a data from two different sources, we just need to call another feature that\ncalculates the data we need.'),(0,a.kt)("h1",{id:"rate-of-two-features"},"Rate of two features"),(0,a.kt)("p",null,'A relatively simple example for this is the following "rate" feature:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},'@raptor.register(float, staleness=\'10h\', freshness=\'1m\')\ndef views_purchases_rate(**req: RaptorRequest):\n    """rate of two features"""\n    views, ts = get_feature("views.default[count], req["entity_id"])\n    purchases, ts = get_feature("purchases.default[count], req["entity_id"])\n    return views / purchases\n')),(0,a.kt)("p",null,"In this code, we're using the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/how-does-raptor-work/features/context#get-feature"},(0,a.kt)("inlineCode",{parentName:"a"},"feature_get()"))," function to request\nthe values of ",(0,a.kt)("inlineCode",{parentName:"p"},"views.default[count]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"purchases.default[count]")," for our ",(0,a.kt)("inlineCode",{parentName:"p"},"entity_id"),". Then, we are returning the rate\nof the two. Simple right?"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Shorthand for ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"feature_get")),(0,a.kt)("p",{parentName:"admonition"},"You can use the function ",(0,a.kt)("inlineCode",{parentName:"p"},"f()")," as an alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"feature_get()"))))}c.isMDXComponent=!0}}]);