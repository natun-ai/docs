"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8952],{6787:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var n=s(4964),a=s(1523);const c={},o="Data Sources",r={id:"docs/concepts/datasources",title:"Data Sources",description:"Data sources are the way we connect the features to the data that we need to calculate the feature value.",source:"@site/docs/docs/concepts/2-datasources.md",sourceDirName:"docs/concepts",slug:"/docs/concepts/datasources",permalink:"/docs/concepts/datasources",draft:!1,unlisted:!1,editUrl:"https://github.com/raptor-ml/docs/tree/master/docs/docs/concepts/2-datasources.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docs",previous:{title:"The basics",permalink:"/docs/concepts/basics"},next:{title:"Aggregations",permalink:"/docs/concepts/aggregations"}},i={},d=[{value:"Declaring the data source",id:"declaring-the-data-source",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"data-sources",children:"Data Sources"}),"\n",(0,n.jsx)(t.p,{children:"Data sources are the way we connect the features to the data that we need to calculate the feature value."}),"\n",(0,n.jsx)(t.p,{children:"Data sources are composed of:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Declaring the data source using the ",(0,n.jsx)(t.a,{href:"/reference/labsdk/decorators",children:(0,n.jsx)(t.code,{children:"@data_source"})})," decorator."]}),"\n",(0,n.jsxs)(t.li,{children:["The data source class itself which represents the data source's schema (specifying the schema is optional, you\ncan simply ",(0,n.jsx)(t.code,{children:"pass"})," the class body)."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"declaring-the-data-source",children:"Declaring the data source"}),"\n",(0,n.jsxs)(t.p,{children:["In order to declare a data source, we use the ",(0,n.jsx)(t.a,{href:"/reference/labsdk/decorators",children:(0,n.jsx)(t.code,{children:"@data_source"})})," decorator."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"from typing_extensions import TypedDict\n\n@data_source(\n    training_data=df,\n    keys=['user_id'],  # Optional\n    timestamp='timestamp',  # Optional\n    production_config=StreamingConfig()  # Optional\n)\nclass User(TypedDict):\n    user_id: str\n    first_name: str\n    last_name: str\n    birthdate: datetime\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"@data_source"})," decorator accepts the following arguments:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"training_data"})," - the data that we'll use to train the model. We can use pandas to import the data from any format that\npandas supports, such as CSV, Parquet, JSON, etc"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"keys"})," - the fields that we'll use to identify the data source's rows. In this case, we're using the ",(0,n.jsx)(t.code,{children:"user_id"})," field."]}),"\n",(0,n.jsx)(t.p,{children:"Although the keys are optional, it's highly recommended to use them, because it will help the Raptor engine to optimize\nthe feature calculations."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"timestamp"})," - the timestamp field of the data source. If the data source doesn't have a timestamp field, you can\nsimply pass ",(0,n.jsx)(t.code,{children:"None"})," or ",(0,n.jsx)(t.code,{children:"pass"})," the argument."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"production_config"})," - the production configuration of the data source. The production configuration is the way we\nconfigure the data source to be used in production."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1523:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(6504);const a={},c=n.createContext(a);function o(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);